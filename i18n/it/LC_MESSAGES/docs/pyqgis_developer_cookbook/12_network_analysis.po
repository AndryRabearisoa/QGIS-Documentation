# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-11-21 22:43\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# 715604de44be4edcb954e574b3edd707
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:9
msgid "Network analysis library"
msgstr ""

# 78ebbd231f1f4b03980c1c0c3cddf3f1
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:11
msgid ""
"Starting from revision `ee19294562 <https://github.com/qgis/Quantum-GIS/"
"commit/ee19294562b00c6ce957945f14c1727210cffdf7>`_ (QGIS >= 1.8) the new "
"network analysis library was added to the QGIS core analysis library. The "
"library:"
msgstr ""

# 4b9ff8e0a6724f19bc32348a67c02800
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:15
msgid ""
"creates mathematical graph from geographical data (polyline vector layers)"
msgstr ""

# 51d6e95918ce4d79a45cc4bdca7b504a
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:16
msgid ""
"implements basics method of the graph theory (currently only Dijkstra's "
"algorithm)"
msgstr ""

# b260e64d78e24f98910eb699d5e68d18
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:19
msgid ""
"Network analysis library was created by exporting basics functions from "
"RoadGraph core plugin and now you can use it's methods in plugins or "
"directly from Python console."
msgstr ""

# 13449766393b4ff5b81160f2d071dcda
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:24
msgid "General information"
msgstr ""

# db44fc65a7004eb1b55ca239fb76d45c
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:26
msgid "Briefly typical use case can be described as:"
msgstr ""

# 3ef68ddac5144d86b6521808c030c930
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:28
msgid "create graph from geodata (usually polyline vector layer)"
msgstr ""

# 7d143f4b0fd54394aaeb050e783fee4a
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:29
msgid "run graph analysis"
msgstr ""

# b63682333cb04dc5b3e632264f88cdf7
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:30
msgid "use analysis results (for example, visualize them)"
msgstr ""

# 4957d22680534ec3afa3d1284d0ef835
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:33
msgid "Building graph"
msgstr ""

# 740cd9c8648c4f8e94c3e865ba2e5a5e
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:35
msgid ""
"The first thing you need to do --- is to prepare input data, that is to "
"convert vector layer into graph. All further actions will use this graph, "
"not the layer."
msgstr ""

# 8deacb9bfc47458e9db14753e05756bf
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:39
msgid ""
"As a source we can use any polyline vector layer. Nodes of the polylines "
"become graph vertices, and segments of the polylines are graph edges. If "
"several nodes have the same coordinates then they are the same graph vertex. "
"So two lines that have a common node become connected to each other."
msgstr ""

# 2c1c6297b9204f798a904b55c9343f02
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:44
msgid ""
"Additionally, during graph creation it is possible to \"fix\" (\"tie\") to "
"the input vector layer any number of additional points. For each additional "
"point a match will be foundÂ --- closest graph vertex or closest graph edge. "
"In the latter case the edge will be splitted and new vertex added."
msgstr ""

# 9493dd6896b949bf8d03c80b49c433e4
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:49
msgid ""
"As the properties of the edge a vector layer attributes can be used and "
"length of the edge."
msgstr ""

# 8cd23bb84437498e8b2567f08968d9a8
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:52
msgid ""
"Converter from vector layer to graph is developed using `Builder <http://en."
"wikipedia.org/wiki/Builder_pattern>`_ programming pattern. For graph "
"construction response so-called Director. There is only one Director for "
"now: `QgsLineVectorLayerDirector <http://qgis.org/api/api/"
"classQgsLineVectorLayerDirector.html>`_. The director sets the basic "
"settings that will be used to construct a graph from a line vector layer, "
"used by the builder to create graph. Currently, as in the case with the "
"director, only one builder exists: `QgsGraphBuilder <http://qgis.org/api/api/"
"classQgsGraphBuilder.html>`_, that creates `QgsGraph <http://qgis.org/api/"
"api/classQgsGraph.html>`_ objects. You may want to implement your own "
"builders that will build a graphs compatible with such libraries as `BGL "
"<http://www.boost.org/doc/libs/1_48_0/libs/graph/doc/index.html>`_ or "
"`NetworkX <http://networkx.lanl.gov/>`_."
msgstr ""

# 4dd56b730040467c9885e730adb480ed
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:63
msgid ""
"To calculate edge properties programming pattern `strategy <http://en."
"wikipedia.org/wiki/Strategy_pattern>`_ is used. For now only "
"`QgsDistanceArcProperter <http://qgis.org/api/api/"
"classQgsDistanceArcProperter.html>`_ strategy is available, that takes into "
"account the length of the route. You can implement your own strategy that "
"will use all necessary parameters. For example, RoadGraph plugin uses "
"strategy that compute travel time using edge length and speed value from "
"attributes."
msgstr ""

# 0ff77814ea5d421db92a181dc8b2955f
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:70
msgid "It's time to dive in the process."
msgstr ""

# f82702968a4444a2b3a850439396b7c1
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:72
msgid ""
"First of all, to use this library we should import networkanalysis module::"
msgstr ""

# f4d1af3e208341489c0fa4a8b703982c
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:76
msgid "Than create director::"
msgstr ""

# 7664cda429fc4df79b6d2339b289eb88
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:89
msgid ""
"To construct a director  we should pass vector layer, that will be used as "
"source for graph and information about allowed movement on each road segment "
"(unilateral or bilateral movement, direct or reverse direction). Here is "
"full list of this parameters:"
msgstr ""

# ef460030898448b3878b53eb87290aba
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:94
msgid "vl --- vector layer used to build graph"
msgstr ""

# c07df53692534dcb87703850e974a07f
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:95
msgid ""
"directionFieldId --- index of the attribute table field, where information "
"about roads directions is stored. If -1, then don't use this info at all"
msgstr ""

# 1c1fa779812c4ad380a01e9a0868dfb6
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:97
msgid ""
"directDirectionValue --- field value for roads with direct direction (moving "
"from first line point to last one)"
msgstr ""

# 5ff0e27d76324b3d80f594456d060bd4
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:99
msgid ""
"reverseDirectionValue --- field value for roads with reverse direction "
"(moving from last line point to first one)"
msgstr ""

# c9fa5d76faee410ea1f4b1ab5d160c47
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:101
msgid ""
"bothDirectionValue --- field value for bilateral roads (for such roads we "
"can move from first point to last and from last to first)"
msgstr ""

# d45674b214f444458f9a0587fe174a46
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:103
msgid ""
"defaultDirection --- default road direction. This value will be used for "
"those roads where field directionFieldId is not set or have some value "
"different from above."
msgstr ""

# 1e7bdc0583754b84a37919d2ff9ea84b
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:107
msgid ""
"It is necessary then to create strategy for calculating edge properties::"
msgstr ""

# 91f1ac44f7d84fa8b9f3c6a8b81a0d53
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:111
msgid "And tell the director about this strategy::"
msgstr ""

# e211e8bcf19748029b27e2ea2699bc2b
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:115
msgid ""
"Now we can create builder, which will create graph. QgsGraphBuilder "
"constructor takes several arguments:"
msgstr ""

# a6419f23347042a7a734e6b76d66aa98
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:118
msgid "crs --- coordinate reference system to use. Mandatory argument."
msgstr ""

# 4f735b400b604eb2864c374db06bf4e8
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:119
msgid ""
"otfEnabled --- use \"on the fly\" reprojection or no. By default const:"
"`True` (use OTF)."
msgstr ""

# 6f89c5ed0b494d2b861370691dbfecbc
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:121
msgid "topologyTolerance --- topological tolerance. Default value is 0."
msgstr ""

# feeed421fb8049d0b6b93ff1ef3edf82
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:122
msgid "ellipsoidID --- ellipsoid to use. By default \"WGS84\"."
msgstr ""

# b0a45385fb1f46e98ec2c703016017e4
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:129
msgid ""
"Also  we can set several points, which will be used in analysis. For "
"example::"
msgstr ""

# da845c586ff84a818372c581c2ce473b
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:134
msgid "Now all is in place so we can build graph and \"tie\" points to it::"
msgstr ""

# 25983f79be934d05828c48edb78d1ea5
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:138
msgid ""
"Building graph can take some time (depends on number of features in a layer "
"and layer size). tiedPoints is a list with coordinates of \"tied\" points. "
"When build operation is finished we can get graph and use it for the "
"analysis::"
msgstr ""

# ddb1eaf162b44c5386bb7d788d78b656
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:144
msgid "With the next code we can get indexes of our points::"
msgstr ""

# 0dcc66b2265f4785b928e114d21382bb
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:151
msgid "Graph analysis"
msgstr ""

# 7a926c837c7145088db56e6129f5eba3
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:153
msgid ""
"Networks analysis is used to find answers on two questions: which vertices "
"are connected and how to find a shortest path. To solve this problems "
"network analysis library provides Dijkstra's algorithm."
msgstr ""

# 8d07b1c891ce41ef943f7168934ff994
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:157
msgid ""
"Dijkstra's algorithm finds the best route from one of the vertices of the "
"graph to all the others and the values of the optimization parameters. The "
"results can be represented as shortest path tree."
msgstr ""

# 347693131a0840d09a1dd9fe1abbccb0
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:161
msgid ""
"The shortest path tree is as oriented weighted graph (or more precisely --- "
"tree) with the following properties:"
msgstr ""

# f5865216c9bc49189aa7ac3b34bb8dca
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:164
msgid "only one vertex have no incoming edges â the root of the tree"
msgstr ""

# 54d9ea0a36564267b93f606179cc3edb
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:165
msgid "all other vertices have only one incoming edge"
msgstr ""

# ab1947d9a85f41479c2c437a0f4bacf7
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:166
msgid ""
"if vertex B is reachable from vertex A, then path from A to B is single "
"available path and it is optimal (shortest) on this graph"
msgstr ""

# 49d5dcd6fe7b4158942ce8f40467fd2c
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:169
msgid ""
"To get shortest path tree use methods Use methods :func:`shortestTree` and :"
"func:`dijkstra` of `QgsGraphAnalyzer <http://qgis.org/api/api/"
"classQgsGraphAnalyzer.html>`_ class. It is recommended to use method :func:"
"`dijkstra` because it works faster and uses memory more efficiently."
msgstr ""

# f7a11141addc4109956b76bbe2469983
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:174
msgid ""
"The :func:`shortestTree` method is useful when you want to walk around the "
"shortest path tree. It always creates new graph object (QgsGraph) and "
"accepts three variables:"
msgstr ""

# 9775a205fbb84103845d7c0696156c62
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:178
msgid "source --- input graph"
msgstr ""

# cce410b50b254deeab798ede7fd42714
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:179
msgid ""
"startVertexIdx --- index of the point on the tree (the root of the tree)"
msgstr ""

# 196ed185572647779ec15aa788c1e753
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:180
msgid "criterionNum --- number of edge property to use (started from 0)."
msgstr ""

# bb103c78f83d4a6baf5c4f3fd326565b
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:186
msgid ""
"The :func:`dijkstra` method has the same arguments, but returns two arrays. "
"In the first array element i contains index of the incoming edge or -1 if "
"there are no incoming edges. In the second array element i contains distance "
"from the root of the tree to vertex i or DOUBLE_MAX if vertex i is "
"unreachable from the root."
msgstr ""

# 86856b1e9b7d428d8e51dfcfb78b4053
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:196
msgid ""
"Here is very simple code to display shortest path tree using graph created "
"with :func:`shortestTree` method (select linestring layer in TOC and replace "
"coordinates with yours one). **Warning**: use this code only as an example, "
"it creates a lots of `QgsRubberBand <http://qgis.org/api/api/"
"classQgsRubberBand.html>`_ objects and may be slow on large datasets."
msgstr ""

# a93612670a2c42f7b7c34189428baefc
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:236
msgid "Same thing but using :func:`dijkstra` method::"
msgstr ""

# 034a18dbe1c94063968afd3889d0f07f
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:271
msgid "Finding shortest path"
msgstr ""

# 90eea74e09b943c1ae1a57c4020efa35
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:273
msgid ""
"To find optimal path between two points the following approach is used. Both "
"points (start A and end B) are \"tied\" to graph when it builds. Than using "
"methods :func:`shortestTree` or :func:`dijkstra` we build shortest tree with "
"root in the start point A. In the same tree we also found end point B and "
"start to walk through tree from point B to point A. Whole algorithm can be "
"written as::"
msgstr ""

# 033c05e5e24e4d259f9c3e47d0cdf08c
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:288
msgid ""
"At this point we have path, in the form of the inverted list of vertices "
"(vertices are listed in reversed order from end point to start one) that "
"will be visited during traveling by this path."
msgstr ""

# 21808896af2a45f1a5d3f8dfe644d598
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:292
msgid ""
"Here is the sample code for QGIS Python Console (you will need to select "
"linestring layer in TOC and replace coordinates in the code with yours) that "
"uses method :func:`shortestTree`::"
msgstr ""

# 60735e75157749d892687a78d8782c32
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:344
msgid "And here is the same sample but using :func:`dikstra` method::"
msgstr ""

# 629603fc79624bb39a1ae1afdade6e09
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:392
msgid "Areas of the availability"
msgstr ""

# 32097c2d858a4cab8f940028fc88e202
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:394
msgid ""
"Area of availability for vertex A is a subset of graph vertices, that are "
"accessible from vertex A and cost of the path from A to this vertices are "
"not greater that some value."
msgstr ""

# a85d1a9e87a34d6e9f4625d9a59d0977
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:398
msgid ""
"More clearly this can be shown with the following example: \"There is a fire "
"station. What part of city fire command can reach in 5 minutes? 10 minutes? "
"15 minutes?\". Answers on this questions are fire station's areas of "
"availability."
msgstr ""

# 565a34ba320e460285ebf1639b50744c
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:402
msgid ""
"To find areas of availablity we can use method :func:`dijksta` of the :class:"
"`QgsGraphAnalyzer` class. It is enough to compare elements of cost array "
"with predefined value. If cost[ i ] is less or equal than predefined value, "
"than vertex i is inside area of availability, otherwise --- outside."
msgstr ""

# 092b05467776455b83c5703a42d5a217
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:407
msgid ""
"More difficult it is to get borders of area of availablity. Bottom border "
"--- is a set of vertices that are still accessible, and top border --- is a "
"set of vertices which are not accesible. In fact this is simple: "
"availability border passed on such edges of the shortest path tree for which "
"start vertex is accessible and end vertex is not accessible."
msgstr ""

# b73c4afcd0344ab584c87cd8da4e86b4
#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:413
msgid "Here is an example::"
msgstr ""
