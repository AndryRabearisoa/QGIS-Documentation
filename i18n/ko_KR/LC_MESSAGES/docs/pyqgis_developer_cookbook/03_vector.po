# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-12-10 23:17\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:9
# 53b86f41b8e2486db072c21aa99d66b6
msgid "Using Vector Layers"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:11
# 43fde468762a4145a7a40895ee218182
msgid "This section summarizes various actions that can be done with vector layers."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:18
# ec9be45c09b64b849cbdd59858f44229
msgid "Iterating over Vector Layer"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:20
# e3aadc1cd52349c4877aeccb9127ed01
msgid "Below is an example how to go through the features of the layer. To read features from layer, initialize the retieval with :func:`select` and then use :func:`nextFeature` calls::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:64
# f95cff36c44141b88c746b97bf8be8b7
msgid ":func:`select` gives you flexibility in what data will be fetched. It can get 4 arguments, all of them are optional:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:68
# ff9acee52f9346bba5abb9fddbc7af84
msgid "List of attributes which should be fetched. Default: empty list"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:70
# 53f8462752464d4d939a43669090ca68
msgid "Spatial filter. If empty rect is given (:obj:`QgsRectangle()`), all features are fetched. Default: empty rect"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:73
# 0600d012db7a446d88752f54a5afabd9
msgid "Whether geometry of the feature should be fetched. Default: :const:`True`"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:75
# 459aa6aabf5a447aa7a2d5f4271e8e01
msgid "When using spatial filter, this argument says whether accurate test for intersection should be done or whether test on bounding box suffices. This is needed e.g. for feature identification or selection. Default: :const:`False`"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:80
# d65fbefffc324d44bb1e93c6c00ed13b
msgid "Some examples::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:92
# 20349b782b4b4fc1b81f5bf64a88ed25
msgid "To obtain field index from its name, use provider's :func:`fieldNameIndex` function::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:104
# 15f2b93b8e234a4a98bd4a0f5b5b431c
msgid "Modifying Vector Layers"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:106
# b50680362a1243b1a217142007814d7b
msgid "Most vector data providers support editing of layer data. Sometimes they support just a subset of possible editing actions. Use the :func:`capabilities` function to find out what set of functionality is supported::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:112
# 0f516f05c54244ff93232943e3f24b2c
msgid "By using any of following methods for vector layer editing, the changes are directly committed to the underlying data store (a file, database etc). In case you would like to do only temporary changes, skip to the next section that explains how to do :ref:`modifications with editing buffer <editing-buffer>`."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:118
# f4a9e2d49199467484ccae1ca2c4c49c
msgid "Add Features"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:120
# 4a3218488d114847932407bc8fa86222
msgid "Create some :class:`QgsFeature` instances and pass a list of them to provider's :func:`addFeatures` method. It will return two values: result (true/false) and list of added features (their ID is set by the data store)::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:132
# 8e4afc9189014dd9b03ed4cf441201df
msgid "Delete Features"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:134
# dc4c80f348d646f3bf7388a9a7f398c9
msgid "To delete some features, just provide a list of their feature IDs::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:140
# 1f3255b29c8547aaa1b2f2b4707d1641
msgid "Modify Features"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:142
# adbf8c3a78b3475a8fcfb3f2ab4c4d70
msgid "It is possible to either change feature's geometry or to change some attributes. The following example first changes values of attributes with index 0 and 1, then it changes the feature's geometry::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:157
# e1d39fb97962461099c41e9d59af52c9
msgid "Adding and Removing Fields"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:159
# ba8a993167194d1889c7be7320343d0a
msgid "To add fields (attributes), you need to specify a list of field defnitions. For deletion of fields just provide a list of field indexes. ::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:173
# 5b19e2e9043f4888905b967e19ffe8f9
msgid "Modifying Vector Layers with an Editing Buffer"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:175
# 9f2a78092f754e368a0e210ca3e2e105
msgid "When editing vectors within QGIS application, you have to first start editing mode for a particular layer, then do some modifications and finally commit (or rollback) the changes. All the changes you do are not written until you commit them --- they stay in layer's in-memory editing buffer. It is possible to use this functionality also programmatically --- it is just another method for vector layer editing that complements the direct usage of data providers. Use this option when providing some GUI tools for vector layer editing, since this will allow user to decide whether to commit/rollback and allows the usage of undo/redo. When committing changes, all changes from the editing buffer are saved to data provider."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:186
# b72f558bfe7d4f8493d04d67e82e852e
msgid "To find out whether a layer is in editing mode, use :func:`isEditing` --- the editing functions work only when the editing mode is turned on. Usage of editing functions::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:205
# 567737772bb1480ba1bbf08ceea6ec7c
msgid "In order to make undo/redo work properly, the above mentioned calls have to be wrapped into undo commands. (If you do not care about undo/redo and want to have the changes stored immediately, then you will have easier work by :ref:`editing with data provider <editing>`.) How to use the undo functionality ::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:223
# 59dbfdc5e7a24997b516e3e36add1fb3
msgid "The :func:`beginEndCommand` will create an internal \"active\" command and will record subsequent changes in vector layer. With the call to :func:`endEditCommand` the command is pushed onto the undo stack and the user will be able to undo/redo it from GUI. In case something went wrong while doing the changes, the :func:`destroyEditCommand` method will remove the command and rollback all changes done while this command was active."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:230
# 45b3cf6c167a45e79fe5bc8d9131e14d
msgid "To start editing mode, there is :func:`startEditing` method, to stop editing there are :func:`commitChanges` and :func:`rollback()` --- however normally you should not need these methods and leave this functionality to be triggered by the user."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:239
# e61ea75a2e90489b9c61743b328c97fc
msgid "Using Spatial Index"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:242
# 0a9b42d69fdb408badc412098df1ae70
msgid "Intro to spatial indexing"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:244
# 06b78e96c35749e899774404f181bbc1
msgid "create spatial index --- the following code creates an empty index::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:248
# b16e8030e94d42d28b97658864a40e16
msgid "add features to index --- index takes :class:`QgsFeature` object and adds it to the internal data structure. You can create the object manually or use one from previous call to provider's :func:`nextFeature()` ::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:254
# ea805005d22c449e9dd68c317ced8b75
msgid "once spatial index is filled with some values, you can do some queries::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:266
# b70b57e8f9d640579dcec6231536ddf9
msgid "Writing Vector Layers"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:268
# 4599e19ca47942418110137781120901
msgid "You can write vector layer files using :class:`QgsVectorFileWriter` class. It supports any other kind of vector file that OGR supports (shapefiles, GeoJSON, KML and others)."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:272
# f5f5424bfd174f6aae6ed7a7095422a9
msgid "There are two possibilities how to export a vector layer:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:274
# 9aef4dd72ff04c66ab7ea7855e99d70b
msgid "from an instance of :class:`QgsVectorLayer`::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:285
# 1e7887c1a4df48bebe42da9938b1892c
msgid "Third parameter specifies output text encoding. Only some drivers need this for correct operation - shapefiles are one of those --- however in case you are not using international characters you do not have to care much about the encoding. The fourth parameter that we left as None may specify destination CRS --- if a valid instance of :class:`QgsCoordinateReferenceSystem` is passed, the layer is transformed to that CRS."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:292
# 9aba1a6c8d1e4dda80f61f3296bde009
msgid "For valid driver names please consult the `supported formats by OGR`_ --- you should pass the value in \"Code\" column as the driver name. Optionally you can set whether to export only selected features, pass further driver-specific options for creation or tell the writer not to create attributes --- look into the documentation for full syntax."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:301
# 52c6bd84276448eea1079938bb1cd4ea
msgid "directly from features::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:332
# 4494086f9584442ab0ea8fbd1f4c5ab1
msgid "Memory Provider"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:334
# 492a1bbf08d64aa390525dad7ad976ef
msgid "Memory provider is intended to be used mainly by plugin or 3rd party app developers. It does not store data on disk, allowing developers to use it as a fast backend for some temporary layers."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:338
# af0e1b7da4db44a6a625719e2370ea3f
msgid "The provider supports string, int and double fields."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:340
# 548781cf80ce4e999f289b33b1dc5ac8
msgid "The memory provider also supports spatial indexing, which is enabled by calling the provider's :func:`createSpatialIndex` function. Once the spatial index is created you will be able to iterate over features within smaller regions faster (since it's not necessary to traverse all the features, only those in specified rectangle)."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:346
# 5a4f346c0c454ea79902930badf2cfdd
msgid "A memory provider is created by passing ``\"memory\"`` as the provider string to the :class:`QgsVectorLayer` constructor."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:349
# d34f6e798d704c958ffe8e97b64ae33e
msgid "The constructor also takes a URI defining the geometry type of the layer, one of: ``\"Point\"``, ``\"LineString\"``, ``\"Polygon\"``, ``\"MultiPoint\"``, ``\"MultiLineString\"``, or ``\"MultiPolygon\"``."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:353
# 48362b098b544aae9d2360cfe54ef8e8
msgid "From QGIS version 1.7 the URI can also specify the coordinate reference system, fields, and indexing of the memory provider in the URI. The syntax is:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:357
# 936aaa3c926d45698c3682bd1daf2014
msgid "Specifies the coordinate reference system, where definition may be any of the forms accepted by :func:`QgsCoordinateReferenceSystem.createFromString`"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:361
# 416bee9c7ba74621a95c1c094ef573c6
msgid "Specifies that the provider will use a spatial index"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:364
# da8f48a2f9bf42ada4c3d8959cccbf82
msgid "Specifies an attribute of the layer.  The attribute has a name, and optionally a type (integer, double, or string), length, and precision. There may be multiple field definitions."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:368
# 7f66f2785c8346d38225a06cb900253f
msgid "The following example of a URI incorporates all these options::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:372
# 750ad78095a2405f9bc2f05acda62836
msgid "The following example code illustrates creating and populating a memory provider::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:395
# 7d223fe83daf4186aaa8725e437def98
msgid "Finally, let's check whether everything went well::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:412
# fe71f6e36dcb4a43a0a62574a253883e
msgid "Appearance (Symbology) of Vector Layers"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:414
# cd06c99d455a4f1a9089921c83d5f5f7
msgid "When a vector layer is being rendered, the appearance of the data is given by **renderer** and **symbols** associated with the layer.  Symbols are classes which take care of drawing of visual representation of features, while renderers determine what symbol will be used for a particular feature."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:419
# 9177f0576acb425aa4e53b57727d2bd7
msgid "In QGIS v1,4 a new vector rendering stack has been introduced in order to overcome the limitations of the original implementation. We refer to it as new symbology or symbology-ng (new generation), the original rendering stack is also called old symbology. Each vector layer uses either new symbology or old symbology, but never both at once or neither of them. It's not a global setting for all layers, so some layers might use new symbology while others still use old symbology. In QGIS options the user can specify what symbology should be used by default when layers are loaded.  The old symbology will be kept in further QGIS v1.x releases for compatibility and we plan to remove it in QGIS v2.0."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:430
# 4803e6783c1b4f19bb17a86242c740fd
msgid "How to find out which implementation is currently in use::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:440
# 90520f777b1b41b59fe13fd1ecf246ff
msgid "Note: if you plan to support also earlier versions (i.e. QGIS < 1.4), you should first check whether the :func:`isUsingRendererV2` method exists --- if not, only old symbology is available::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:447
# 4ac10d1accb742dabf5bb0a63482a0cb
msgid "We are going to focus primarily on new symbology because it has better capabilities are more options for customization."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:453
# 9919588bab704baea55ae1d7bc782257
msgid "New Symbology"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:455
# 4ec813daae674d52bd14884ea6e26329
msgid "Now that we have a reference to a renderer from the previous section, let us explore it a bit::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:460
# 601c31115aa5434e9a3eb38c93c32974
msgid "There are several known renderer types available in QGIS core library:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:463
# be85864f3fe14766afacc2a8de0d43ce
msgid "Type"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:463
# 48c1d7d0899b4da5b2cf71a0e21859fe
msgid "Class"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:463
# 0e1be5cdaa6e4427b5997f0a03b2494c
msgid "Description"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:465
# 0927aa0c0d8f4f6eadce2ac9903c541f
msgid "singleSymbol"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:465
# 8d14d69fed004bf5a0f14255ace8d6f1
msgid ":class:`QgsSingleSymbolRendererV2`"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:465
# f7b1ac9fd4e54ab18add4668e5ada571
msgid "Renders all features with the same symbol"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:466
# 9c848baad48c4e779ab750b715306865
msgid "categorizedSymbol"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:466
# 689ed7cbbccd4411a599589eb103907e
msgid ":class:`QgsCategorizedSymbolRendererV2`"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:466
# 5d170dbda82c4a88bf4af4b7c1aa136d
msgid "Renders features using a different symbol for each category"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:467
# 056298698b5844b2bb3ddf963c1563d5
msgid "graduatedSymbol"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:467
# 2041fd8f3c564b1991c1636dfa6e6ac2
msgid ":class:`QgsGraduatedSymbolRendererV2`"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:467
# 2300fa98022d4272b2be3af01473e32a
msgid "Renders features using a different symbol for each range of values"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:470
# b8762698c1144ac1a4bcd29cc80f68a5
msgid "There might be also some custom renderer types, so never make an assumption there are just these types. You can query :class:`QgsRendererV2Registry` singleton to find out currently available renderers."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:474
# 3187b3ed706440e9a225a9f3f3fc4d58
msgid "It is possible to obtain a dump of a renderer contents in text form --- can be useful for debugging::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:482
# 1a05bf48ac87449aab2a290a5f53040e
msgid "Single Symbol Renderer"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:484
# 6588d3ab2abf48d2ba5ee09be834b9b4
msgid "You can get the symbol used for rendering by calling :func:`symbol` method and change it with :func:`setSymbol` method (note for C++ devs: the renderer takes ownership of the symbol.)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:491
# b091d753383b49698413d47a56478eb7
msgid "Categorized Symbol Renderer"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:493
# 0949fede58c84a0f8b046638ac7b0b6d
msgid "You can query and set attribute name which is used for classification: use :func:`classAttribute` and :func:`setClassAttribute` methods."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:496
# 02a9a3749f564953af8267482771721f
msgid "To get a list of categories::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:501
# 268bc739a63f476e8bf320f447b71cdd
msgid "Where :func:`value` is the value used for discrimination between categories, :func:`label` is a text used for category description and :func:`symbol` method returns assigned symbol."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:505
# f05d7a7697bc4798a313d9ddf17c886f
msgid "The renderer usually stores also original symbol and color ramp which were used for the classification: :func:`sourceColorRamp` and :func:`sourceSymbol` methods."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:511
# 6687c922dea242e9b63f88d555ab1598
msgid "Graduated Symbol Renderer"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:513
# 4db5d11d49f74f89946dcc45bef25e46
msgid "This renderer is very similar to the categorized symbol renderer described above, but instead of one attribute value per class it works with ranges of values and thus can be used only with numerical attributes."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:517
# df4b36bf2d554f55a562167254a4fb3e
msgid "To find out more about ranges used in the renderer::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:527
# 783810b6322d4f1ab0aa03cfef5dd1f4
msgid "you can again use :func:`classAttribute` to find out classification attribute name, :func:`sourceSymbol` and :func:`sourceColorRamp` methods.  Additionally there is :func:`mode` method which determines how the ranges were created: using equal intervals, quantiles or some other method."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:532
# 6a9a2c0ce9d049f5973170cba5221613
msgid "If you wish to create your own graduated symbol renderer you can do so as illustrated in the example snippet below (which creates a simple two class arrangement)::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:589
# 26f78cc938254452bb3ed954b267f17b
msgid "Working with Symbols"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:591
# 02d9c111b4b34f7fa72579bc3334d3c7
msgid "For representation of symbols, there is :class:`QgsSymbolV2` base class with three derived classes:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:594
# 302bcc4d024049dd903e071b96415c16
msgid ":class:`QgsMarkerSymbolV2` - for point features"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:595
# b84a0384787e4e3ab45b40ad0f298f8b
msgid ":class:`QgsLineSymbolV2` - for line features"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:596
# f366272847974760a7e26697b652663d
msgid ":class:`QgsFillSymbolV2` - for polygon features"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:598
# 7dfc85d35c284c84ae65ca9ece01cb31
msgid "**Every symbol consists of one or more symbol layers** (classes derived from :class:`QgsSymbolLayerV2`). The symbol layers do the actual rendering, the symbol class itself serves only as a container for the symbol layers."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:602
# 89963d0d982f4a76b33bfa524955be59
msgid "Having an instance of a symbol (e.g. from a renderer), it is possible to explore it: :func:`type` method says whether it is a marker, line or fill symbol. There is a :func:`dump` method which returns a brief description of the symbol. To get a list of symbol layers::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:611
# c66a0935c4c64c33b631655d77d3d699
msgid "To find out symbol's color use :func:`color` method and :func:`setColor` to change its color. With marker symbols additionally you can query for the symbol size and rotation with :func:`size` and :func:`angle` methods, for line symbols there is :func:`width` method returning line width."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:616
# 1f1aa18f02cb4fdcb80162734fabc1d9
msgid "Size and width are in millimeters by default, angles are in degrees."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:621
# d4c991135e5143da822e25b59efde2ec
msgid "Working with Symbol Layers"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:623
# 17d2b302dae9474fa449607a7307d2a4
msgid "As said before, symbol layers (subclasses of :class:`QgsSymbolLayerV2`) determine the appearance of the features.  There are several basic symbol layer classes for general use. It is possible to implement new symbol layer types and thus arbitrarily customize how features will be rendered. The :func:`layerType` method uniquely identifies the symbol layer class --- the basic and default ones are SimpleMarker, SimpleLine and SimpleFill symbol layers types."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:630
# 0a470636e123407cbd3c2e22b19528b8
msgid "You can get a complete list of the types of symbol layers you can create for a given symbol layer class like this::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:639
# f8ff06bee74b425ea8ea2ccb9b83c45f
msgid "Output::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:647
# b88ad234153c41fab6d4dd42477da7fb
msgid ":class:`QgsSymbolLayerV2Registry` class manages a database of all available symbol layer types."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:650
# 57e923a51d724ded8ec009efd15573a9
msgid "To access symbol layer data, use its :func:`properties` method that returns a key-value dictionary of properties which determine the appearance. Each symbol layer type has a specific set of properties that it uses. Additionally, there are generic methods :func:`color`, :func:`size`, :func:`angle`, :func:`width` with their setter counterparts. Of course size and angle is available only for marker symbol layers and width for line symbol layers."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:660
# 6e9a69f635d2483a93ef376fce1b4f00
msgid "Creating Custom Symbol Layer Types"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:662
# 69ff0eaf1eb041e6abb646186e0a4151
msgid "Imagine you would like to customize the way how the data gets rendered. You can create your own symbol layer class that will draw the features exactly as you wish. Here is an example of a marker that draws red circles with specified radius::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:697
# 243b0f40ddbe4d588adcc85f99b4b0e8
msgid "The :func:`layerType` method determines the name of the symbol layer, it has to be unique among all symbol layers. Properties are used for persistence of attributes. :func:`clone` method must return a copy of the symbol layer with all attributes being exactly the same. Finally there are rendering methods: :func:`startRender` is called before rendering first feature, :func:`stopRender` when rendering is done. And :func:`renderPoint` method which does the rendering. The coordinates of the point(s) are already transformed to the output coordinates."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:706
# 67d3a7c2dc014d73a39e4e49e1b7121c
msgid "For polylines and polygons the only difference would be in the rendering method: you would use :func:`renderPolyline` which receives a list of lines, resp. :func:`renderPolygon` which receives list of points on outer ring as a first parameter and a list of inner rings (or None) as a second parameter."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:711
# 10b709e8b16348cea5de7b8ef92440d1
msgid "Usually it is convenient to add a GUI for setting attributes of the symbol layer type to allow users to customize the appearance: in case of our example above we can let user set circle radius. The following code implements such widget::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:744
# 1a5d0f745c364ccea3f0d247e4a2969d
msgid "This widget can be embedded into the symbol properties dialog. When the symbol layer type is selected in symbol properties dialog, it creates an instance of the symbol layer and an instance of the symbol layer widget. Then it calls :func:`setSymbolLayer` method to assign the symbol layer to the widget. In that method the widget should update the UI to reflect the attributes of the symbol layer. :func:`symbolLayer` function is used to retrieve the symbol layer again by the properties dialog to use it for the symbol."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:752
# 1730d336a38b4aee844b9bcda7eafd1c
msgid "On every change of attributes, the widget should emit :func:`changed()` signal to let the properties dialog update the symbol preview."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:755
# 5bb6088e19cb499fa1e26194cf43c728
msgid "Now we are missing only the final glue: to make QGIS aware of these new classes. This is done by adding the symbol layer to registry. It is possible to use the symbol layer also without adding it to the registry, but some functionality will not work: e.g. loading of project files with the custom symbol layers or inability to edit the layer's attributes in GUI."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:761
# d0e52e05b8734be390e2513a5724a30b
msgid "We will have to create metadata for the symbol layer::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:777
# 8ee41e0d3e854ccda1d935bc485784a1
msgid "You should pass layer type (the same as returned by the layer) and symbol type (marker/line/fill) to the constructor of parent class. :func:`createSymbolLayer` takes care of creating an instance of symbol layer with attributes specified in the `props` dictionary. (Beware, the keys are QString instances, not \"str\" objects). And there is :func:`createSymbolLayerWidget` method which returns settings widget for this symbol layer type."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:784
# d53b903c0aa845d9a55d205e4b647bcf
msgid "The last step is to add this symbol layer to the registry --- and we are done."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:790
# 1db9d2b9497f41a78229443d2e4ec367
msgid "Creating Custom Renderers"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:792
# 14b461a4fa3e4b88a9b10e65cfdda4bd
msgid "It might be useful to create a new renderer implementation if you would like to customize the rules how to select symbols for rendering of features. Some use cases where you would want to do it: symbol is determined from a combination of fields, size of symbols changes depending on current scale etc."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:797
# a449a82881af4d2ea3a6567ea26ee7c7
msgid "The following code shows a simple custom renderer that creates two marker symbols and chooses randomly one of them for every feature::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:824
# d00bebc571d842baa6aa69f4614ff97c
msgid "The constructor of parent :class:`QgsFeatureRendererV2` class needs renderer name (has to be unique among renderers). :func:`symbolForFeature` method is the one that decides what symbol will be used for a particular feature. :func:`startRender` and :func:`stopRender` take care of initialization/finalization of symbol rendering. :func:`usedAttributes` method can return a list of field names that renderer expects to be present. Finally :func:`clone` function should return a copy of the renderer."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:832
# ee400d9f679047afa8a7a9f7e0612c3b
msgid "Like with symbol layers, it is possible to attach a GUI for configuration of the renderer. It has to be derived from :class:`QgsRendererV2Widget`. The following sample code creates a button that allows user to set symbol of the first symbol::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:861
# c3651a05462e44a4ace99131ad5320aa
msgid "The constructor receives instances of the active layer (:class:`QgsVectorLayer`), the global style (:class:`QgsStyleV2`) and current renderer. If there is no renderer or the renderer has different type, it will be replaced with our new renderer, otherwise we will use the current renderer (which has already the type we need). The widget contents should be updated to show current state of the renderer. When the renderer dialog is accepted, widget's :func:`renderer` method is called to get the current renderer --- it will be assigned to the layer."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:870
# 25831fed188a47ffbd4a7cc0fed5b024
msgid "The last missing bit is the renderer metadata and registration in registry, otherwise loading of layers with the renderer will not work and user will not be able to select it from the list of renderers. Let us finish our RandomRenderer example::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:886
# df505fffe30843be8f8c052b9f4beb2b
msgid "Similarly as with symbol layers, abstract metadata constructor awaits renderer name, name visible for users and optionally name of renderer's icon. :func:`createRenderer` method passes :class:`QDomElement` instance that can be used to restore renderer's state from DOM tree. :func:`createRendererWidget` method creates the configuration widget. It does not have to be present or can return `None` if the renderer does not come with GUI."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:893
# ea2ac6c8eeb744d3ab3867565db2dcfe
msgid "To associate an icon with the renderer you can assign it in :class:`QgsRendererV2AbstractMetadata` constructor as a third (optional) argument --- the base class constructor in the RandomRendererMetadata :func:`__init__` function becomes::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:903
# e36f0e231b3144d3b05a9f2b00978f59
msgid "The icon can be associated also at any later time using :func:`setIcon` method of the metadata class. The icon can be loaded from a file (as shown above) or can be loaded from a `Qt resource <http://qt.nokia.com/doc/4.5/resources.html>`_ (PyQt4 includes .qrc compiler for Python)."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:909
# 131da1c14bac46f09671ffeab54a02d2
msgid "Further Topics"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:912
# 6a0c0aedadbe4c5288de4ff83471439b
msgid "creating/modifying symbols"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:913
# 891ebd2f6ad441ffb4d1ae0690b12e74
msgid "working with style (:class:`QgsStyleV2`)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:914
# 2d228fb643b24906ae0cb9d1015e69c1
msgid "working with color ramps (:class:`QgsVectorColorRampV2`)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:915
# ecd326b20fe1465ba23f036a611f3a37
msgid "rule-based renderer"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:916
# 8d01138367b64f72bc2353bc7f489517
msgid "exploring symbol layer and renderer registries"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:921
# 12adbff2640443b394b07c7c03e21d04
msgid "Old Symbology"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:923
# 28745ae2a97347d59f80ff5c91077b01
msgid "A symbol determines color, size and other properties of the feature. Renderer associated with the layer decides what symbol will be used for particular feature. There are four available renderers:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:927
# 9ca374e6b5974bb59ff8514ce0fdf843
msgid "single symbol renderer (:class:`QgsSingleSymbolRenderer`) --- all features are rendererd with the same symbol."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:929
# 18db4341245b4c778fbb1e6bb556d861
msgid "unique value renderer (:class:`QgsUniqueValueRenderer`) --- symbol for each feature is choosen from attribute value."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:931
# b1f55676853449328d74301a42890091
msgid "graduated symbol renderer (:class:`QgsGraduatedSymbolRenderer`) --- a symbol is applied to a subgroup (class) of features, which is calculated on a numeric field"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:934
# 6fa2965e37354335b5bfc342cb623f41
msgid "continuous color renderer (:class:`QgsContinuousSymbolRenderer`)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:936
# 37cbe50ef8054817a03c73c953760d75
msgid "How to create a point symbol::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:946
# 8e9484f7a4004b93aa4d1d00a197e601
msgid "The :func:`setNamedPointSymbol` method determines the shape of the symbol. There are two classes: hardcoded symbols (prefixed ``hard:``) and SVG symbols (prefixed ``svg:``). The following hardcoded symbols are available: ``circle``, ``rectangle``, ``diamond``, ``pentagon``, ``cross``, ``cross2``, ``triangle``, ``equilateral_triangle``, ``star``, ``regular_star``, ``arrow``."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:952
# aac585af4fa34f9c83792d4a77cd9371
msgid "How to create an SVG symbol::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:958
# 1f09d70ec15540b082c3cbd867013097
msgid "SVG symbols do not support setting colors, fill and line styles."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:960
# dd74c28282b04209a6898a7b1bbf7505
msgid "How to create a line symbol::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:964
# 4d9cb6274d5c4092a0396c214b8efaa9
msgid "How to create a fill symbol::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:968
# 648097720bd44c789b2ae40c0843c5df
msgid "Create a single symbol renderer::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:973
# 05e718b07cc34b38be857f295fe81c8d
msgid "Assign the renderer to a layer::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:977
# 7afb544c3a5d48ad88561aabd8e64d0b
msgid "Create unique value renderer::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:981
# fc8385a5adcb43e0846d2b6e4e7b8e8c
msgid "Create graduated symbol renderer::"
msgstr ""

