# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-12-10 23:17\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:11
# d689e3e6df294f5d8642d2ce9b85d6db
msgid "Reading And Storing Settings"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:13
# 0f4c52475df440ef8a579ad07f0331a8
msgid "Many times it is useful for a plugin to save some variables so that the user does not have to enter or select them again next time the plugin is run."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:16
# addee96c30604bd1bf5c657174a3e7e2
msgid "These variables can be saved a retrieved with help of Qt and QGIS API. For each variable, you should pick a key that will be used to access the variable --- for user's favourite color you could use key \"favourite_color\" or any other meaningful string. It is recommended to give some structure to naming of keys."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:21
# fed3d8d3dd05455da94089274262d097
msgid "We can make difference between several types of settings:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:25
# e36a5ea9e5d640668ffeb187d6a4eee8
msgid "**global settings** --- they are bound to the user at particular machine. QGIS itself stores a lot of global settings, for example, main window size or default snapping tolerance. This functionality is provided directly by Qt framework by the means of QSettings class. By default, this class stores settings in system's \"native\" way of storing settings, that is --- registry (on Windows), .plist file (on Mac OS X) or .ini file (on Unix). The `QSettings documentation <http://doc.qt.nokia.com/stable/qsettings.html>`_ is comprehensive, so we will provide just a simple example::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:46
# 948f96cc318047ffaab34dba4e1579d9
msgid "Qt uses QVariant instances for variable values in setValue() and value() methods. Your values are automagically converted from Python to QVariant instances, however the conversion from QVariant to Python is not automatic: that's why we use the to*() methods. Few more things to note here:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:51
# cf2545a920bb4512830bd784dad13266
msgid "the second parameter to value() method is optional and states the default value if there is no previous value set"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:53
# b0105c74c8364b26877a8c07a16462b5
msgid "toString() returns a QString instance, not a Python string"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:54
# 44eedf024dd54d0a8a5a874a6e7949ab
msgid "toInt() and toDouble() return tuples (value, ok) --- the second item indicates const:`True` if whether the conversion from QVariant to the number went fine --- in this example we ignore that indicator and only take the value."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:60
# 468f696f29e54a6f869fc4f00712c5ba
msgid "**project settings** --- vary between different projects and therefore they are connected with a project file. Map canvas background or destination coordinate reference system (CRS) are examples --- white background and WGS84 might be suitable for one project, while yellow background and UTM projection for another one. An example of usage follows::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:76
# d04766aa1b5344d8a33daf2444e3d995
msgid "Hopefully the QgsProject class will be updated in future to provide API similar to the one of QSettings class. Due to some limitations of Python bindings, it is not possible to save floating point numbers."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:82
# b8f015ba17344192860063e04d0e704f
msgid "**map layer settings** --- these settings are related to a particular instance of a map layer with a project. They are *not* connected with underlying data source of a layer, so if you create two map layer instances of one shapefile, they will not share the settings. The settings are stored in project file, so if the user opens the project again, the layer-related settings will be there again. This functionality has been added in QGIS v1.4. The API is similar to QSettings --- it takes and returns QVariant instances::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:98
# b9f61c8143154773b0f4bd6302554b12
msgid "Keys for settings that can be shared among plugins"
msgstr ""

