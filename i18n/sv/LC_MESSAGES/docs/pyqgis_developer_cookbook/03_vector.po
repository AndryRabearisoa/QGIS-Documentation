# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-12-10 23:17\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# 58a0e29c67894446a46ddff96333d22c
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:9
msgid "Using Vector Layers"
msgstr ""

# ec323e8576ce4870b143b06e5039b76e
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:11
msgid ""
"This section summarizes various actions that can be done with vector layers."
msgstr ""

# 39dfe8be4ced4e05af24927f5fbaee8f
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:18
msgid "Iterating over Vector Layer"
msgstr ""

# 4653684d8b744298955029afe50e6aff
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:20
msgid ""
"Below is an example how to go through the features of the layer. To read "
"features from layer, initialize the retieval with :func:`select` and then "
"use :func:`nextFeature` calls::"
msgstr ""

# 1938121363214a4a9543659b28a1bb8b
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:64
msgid ""
":func:`select` gives you flexibility in what data will be fetched. It can "
"get 4 arguments, all of them are optional:"
msgstr ""

# 10c8e78ee2cc430ebea3ca0e9e9f3a7a
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:68
msgid "List of attributes which should be fetched. Default: empty list"
msgstr ""

# 6de63a021b4f4abb8e36fec16022e49e
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:70
msgid ""
"Spatial filter. If empty rect is given (:obj:`QgsRectangle()`), all features "
"are fetched. Default: empty rect"
msgstr ""

# 63ca04ec24d8456eb765a468ce35cd62
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:73
msgid ""
"Whether geometry of the feature should be fetched. Default: :const:`True`"
msgstr ""

# 5669c07ee58d4058bc8b11f34daa5e79
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:75
msgid ""
"When using spatial filter, this argument says whether accurate test for "
"intersection should be done or whether test on bounding box suffices. This "
"is needed e.g. for feature identification or selection. Default: :const:"
"`False`"
msgstr ""

# 71e10146dd3e4e3cb6bc318746bc074e
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:80
msgid "Some examples::"
msgstr ""

# b06e72e165f24a9cbfc5883522e16172
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:92
msgid ""
"To obtain field index from its name, use provider's :func:`fieldNameIndex` "
"function::"
msgstr ""

# 655156b89a88461fa38a23f37f0949e8
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:104
msgid "Modifying Vector Layers"
msgstr ""

# df9afeb02a9142bf84812a2a2a330ff1
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:106
msgid ""
"Most vector data providers support editing of layer data. Sometimes they "
"support just a subset of possible editing actions. Use the :func:"
"`capabilities` function to find out what set of functionality is supported::"
msgstr ""

# 67e62113ecc5433d823a129ec9af0e97
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:112
msgid ""
"By using any of following methods for vector layer editing, the changes are "
"directly committed to the underlying data store (a file, database etc). In "
"case you would like to do only temporary changes, skip to the next section "
"that explains how to do :ref:`modifications with editing buffer <editing-"
"buffer>`."
msgstr ""

# 4a44c63c83e94de2bab8561363da2177
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:118
msgid "Add Features"
msgstr ""

# 07b4025064e3496b82ff53dd00944cdb
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:120
msgid ""
"Create some :class:`QgsFeature` instances and pass a list of them to "
"provider's :func:`addFeatures` method. It will return two values: result "
"(true/false) and list of added features (their ID is set by the data store)::"
msgstr ""

# 673f321f0a42485fab70fcd6ba5d7392
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:132
msgid "Delete Features"
msgstr ""

# 8581de2cd4e04d968b11d64483f55ee5
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:134
msgid "To delete some features, just provide a list of their feature IDs::"
msgstr ""

# 7a2d5cc9b9664fc0a707a42ce0e0466a
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:140
msgid "Modify Features"
msgstr ""

# b5ccc3c3b3bd49aba2b549a43f4f58e0
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:142
msgid ""
"It is possible to either change feature's geometry or to change some "
"attributes. The following example first changes values of attributes with "
"index 0 and 1, then it changes the feature's geometry::"
msgstr ""

# 7e7157f131024bb596865109b90470b9
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:157
msgid "Adding and Removing Fields"
msgstr ""

# 73a264be955148b3aa9162f9f9aedf8d
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:159
msgid ""
"To add fields (attributes), you need to specify a list of field defnitions. "
"For deletion of fields just provide a list of field indexes. ::"
msgstr ""

# eacdd6f63bc2419c80a2abcfd110270c
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:173
msgid "Modifying Vector Layers with an Editing Buffer"
msgstr ""

# 77321a9cdfd7468cbebdeb68398f7569
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:175
msgid ""
"When editing vectors within QGIS application, you have to first start "
"editing mode for a particular layer, then do some modifications and finally "
"commit (or rollback) the changes. All the changes you do are not written "
"until you commit them --- they stay in layer's in-memory editing buffer. It "
"is possible to use this functionality also programmatically --- it is just "
"another method for vector layer editing that complements the direct usage of "
"data providers. Use this option when providing some GUI tools for vector "
"layer editing, since this will allow user to decide whether to commit/"
"rollback and allows the usage of undo/redo. When committing changes, all "
"changes from the editing buffer are saved to data provider."
msgstr ""

# 133024b236134855ae4a7b6c2367a371
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:186
msgid ""
"To find out whether a layer is in editing mode, use :func:`isEditing` --- "
"the editing functions work only when the editing mode is turned on. Usage of "
"editing functions::"
msgstr ""

# 49f6383870fd4559a3df4594b0f6d748
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:205
msgid ""
"In order to make undo/redo work properly, the above mentioned calls have to "
"be wrapped into undo commands. (If you do not care about undo/redo and want "
"to have the changes stored immediately, then you will have easier work by :"
"ref:`editing with data provider <editing>`.) How to use the undo "
"functionality ::"
msgstr ""

# 6f39f45eaf944f499febb112b943dd00
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:223
msgid ""
"The :func:`beginEndCommand` will create an internal \"active\" command and "
"will record subsequent changes in vector layer. With the call to :func:"
"`endEditCommand` the command is pushed onto the undo stack and the user will "
"be able to undo/redo it from GUI. In case something went wrong while doing "
"the changes, the :func:`destroyEditCommand` method will remove the command "
"and rollback all changes done while this command was active."
msgstr ""

# 3e2dabb7534049bea986adf0fa938533
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:230
msgid ""
"To start editing mode, there is :func:`startEditing` method, to stop editing "
"there are :func:`commitChanges` and :func:`rollback()` --- however normally "
"you should not need these methods and leave this functionality to be "
"triggered by the user."
msgstr ""

# 0749eef9ddc0498b8d9b536a6314e6b1
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:239
msgid "Using Spatial Index"
msgstr ""

# 32ae9466162844e799a0ad5370af7b5a
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:242
msgid "Intro to spatial indexing"
msgstr ""

# a44ae96885aa449cbe649e63302788b4
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:244
msgid "create spatial index --- the following code creates an empty index::"
msgstr ""

# cc21f7dbcead40298f0ace6885811654
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:248
msgid ""
"add features to index --- index takes :class:`QgsFeature` object and adds it "
"to the internal data structure. You can create the object manually or use "
"one from previous call to provider's :func:`nextFeature()` ::"
msgstr ""

# 9a9a85a735b84b55b3cd7571dd4717c8
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:254
msgid ""
"once spatial index is filled with some values, you can do some queries::"
msgstr ""

# e8707887bc384fa6a4ec745aa3fbdf19
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:266
msgid "Writing Vector Layers"
msgstr ""

# 1846060a10154e549637aa91959a99e7
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:268
msgid ""
"You can write vector layer files using :class:`QgsVectorFileWriter` class. "
"It supports any other kind of vector file that OGR supports (shapefiles, "
"GeoJSON, KML and others)."
msgstr ""

# 55ff73e5100d479cbdb2ce890d4978dd
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:272
msgid "There are two possibilities how to export a vector layer:"
msgstr ""

# a25a10b0ef474e1e81b9d012db556831
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:274
msgid "from an instance of :class:`QgsVectorLayer`::"
msgstr ""

# d497694d2fca4e34ba28f4acc5c61a39
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:285
msgid ""
"Third parameter specifies output text encoding. Only some drivers need this "
"for correct operation - shapefiles are one of those --- however in case you "
"are not using international characters you do not have to care much about "
"the encoding. The fourth parameter that we left as None may specify "
"destination CRS --- if a valid instance of :class:"
"`QgsCoordinateReferenceSystem` is passed, the layer is transformed to that "
"CRS."
msgstr ""

# a523cdae6ee94913a14250638e028d4f
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:292
msgid ""
"For valid driver names please consult the `supported formats by OGR`_ --- "
"you should pass the value in \"Code\" column as the driver name. Optionally "
"you can set whether to export only selected features, pass further driver-"
"specific options for creation or tell the writer not to create attributes "
"--- look into the documentation for full syntax."
msgstr ""

# 0bbd5fbd03ba40278aa777843f294941
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:301
msgid "directly from features::"
msgstr ""

# 3f5bae8172d94b46a86fd9bcba133182
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:332
msgid "Memory Provider"
msgstr ""

# 5ffd075a8dac43d0bbf67bd4bb038c7c
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:334
msgid ""
"Memory provider is intended to be used mainly by plugin or 3rd party app "
"developers. It does not store data on disk, allowing developers to use it as "
"a fast backend for some temporary layers."
msgstr ""

# dbadb7cefe8f4ab48a4b3966d341b246
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:338
msgid "The provider supports string, int and double fields."
msgstr ""

# cdaff23023f744f1a16a662fefcfacb8
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:340
msgid ""
"The memory provider also supports spatial indexing, which is enabled by "
"calling the provider's :func:`createSpatialIndex` function. Once the spatial "
"index is created you will be able to iterate over features within smaller "
"regions faster (since it's not necessary to traverse all the features, only "
"those in specified rectangle)."
msgstr ""

# 86d80976df9147f6958ef902c7be7eb4
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:346
msgid ""
"A memory provider is created by passing ``\"memory\"`` as the provider "
"string to the :class:`QgsVectorLayer` constructor."
msgstr ""

# 8e0149f19af04fa4996c72ddd5970320
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:349
msgid ""
"The constructor also takes a URI defining the geometry type of the layer, "
"one of: ``\"Point\"``, ``\"LineString\"``, ``\"Polygon\"``, ``\"MultiPoint"
"\"``, ``\"MultiLineString\"``, or ``\"MultiPolygon\"``."
msgstr ""

# d2775c90c2434964ad00743de5d062f1
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:353
msgid ""
"From QGIS version 1.7 the URI can also specify the coordinate reference "
"system, fields, and indexing of the memory provider in the URI. The syntax "
"is:"
msgstr ""

# 0ef49a7a938e4c38a58cf2ade85f74e4
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:357
msgid ""
"Specifies the coordinate reference system, where definition may be any of "
"the forms accepted by :func:`QgsCoordinateReferenceSystem.createFromString`"
msgstr ""

# fe178bcce1844336947ab8a4245c195b
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:361
msgid "Specifies that the provider will use a spatial index"
msgstr ""

# 2c7f0c532f484fbfafe94e5d593f772f
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:364
msgid ""
"Specifies an attribute of the layer.  The attribute has a name, and "
"optionally a type (integer, double, or string), length, and precision. There "
"may be multiple field definitions."
msgstr ""

# 056b584c2e2144ca9c70181961f71d91
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:368
msgid "The following example of a URI incorporates all these options::"
msgstr ""

# d6c076e0a82745e2b8805dad26a0ba7d
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:372
msgid ""
"The following example code illustrates creating and populating a memory "
"provider::"
msgstr ""

# 0a48a7d7ae3d49139e1d0bf88c457576
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:395
msgid "Finally, let's check whether everything went well::"
msgstr ""

# c31aa163012a4eaaa36cba0cfacf4fb3
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:412
msgid "Appearance (Symbology) of Vector Layers"
msgstr ""

# 939fa86cec104ee583eaa0dd8fb3bb58
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:414
msgid ""
"When a vector layer is being rendered, the appearance of the data is given "
"by **renderer** and **symbols** associated with the layer.  Symbols are "
"classes which take care of drawing of visual representation of features, "
"while renderers determine what symbol will be used for a particular feature."
msgstr ""

# 614d792361474a2abe0ab9b603a49558
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:419
msgid ""
"In QGIS v1,4 a new vector rendering stack has been introduced in order to "
"overcome the limitations of the original implementation. We refer to it as "
"new symbology or symbology-ng (new generation), the original rendering stack "
"is also called old symbology. Each vector layer uses either new symbology or "
"old symbology, but never both at once or neither of them. It's not a global "
"setting for all layers, so some layers might use new symbology while others "
"still use old symbology. In QGIS options the user can specify what symbology "
"should be used by default when layers are loaded.  The old symbology will be "
"kept in further QGIS v1.x releases for compatibility and we plan to remove "
"it in QGIS v2.0."
msgstr ""

# aa1976d9c3c541fc8429a50b0fedcb39
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:430
msgid "How to find out which implementation is currently in use::"
msgstr ""

# 87184a3b706a486b887395b7ebc1f40b
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:440
msgid ""
"Note: if you plan to support also earlier versions (i.e. QGIS < 1.4), you "
"should first check whether the :func:`isUsingRendererV2` method exists --- "
"if not, only old symbology is available::"
msgstr ""

# df1e4825f2c54cd0b8c959fd46c2e492
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:447
msgid ""
"We are going to focus primarily on new symbology because it has better "
"capabilities are more options for customization."
msgstr ""

# 8a7f73c5c97741acbec1ab8e2879e728
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:453
msgid "New Symbology"
msgstr ""

# da2c0a56223a4d47ac14db1bd7316d5d
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:455
msgid ""
"Now that we have a reference to a renderer from the previous section, let us "
"explore it a bit::"
msgstr ""

# f63c5b9ad8874953b8a49b76fe608f5f
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:460
msgid "There are several known renderer types available in QGIS core library:"
msgstr ""

# cad748b5673e457c9f957d8b4097f58a
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:463
msgid "Type"
msgstr ""

# a5815c6588c0424dabb8aecab056b088
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:463
msgid "Class"
msgstr ""

# bc53b87e0119485d80c00f81ee8759d8
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:463
msgid "Description"
msgstr ""

# 5bbf02a33c764137ab24b735fa0b21b7
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:465
msgid "singleSymbol"
msgstr ""

# 071ea46675ee476ea497cab1d7e39a55
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:465
msgid ":class:`QgsSingleSymbolRendererV2`"
msgstr ""

# f8e3d43d318247f8a4f2913aa4aff017
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:465
msgid "Renders all features with the same symbol"
msgstr ""

# bdb0b5e6ade94ae6a8e808fd157da88f
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:466
msgid "categorizedSymbol"
msgstr ""

# 8880540ce81049ca8e2f2509916c652a
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:466
msgid ":class:`QgsCategorizedSymbolRendererV2`"
msgstr ""

# a94d5f9bd33b46c2ba2a6697e77e8227
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:466
msgid "Renders features using a different symbol for each category"
msgstr ""

# d9c44d2ebbff49b5a3cf91bb4db69f89
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:467
msgid "graduatedSymbol"
msgstr ""

# 5c796bc25f0a4679b6c9926e080d680d
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:467
msgid ":class:`QgsGraduatedSymbolRendererV2`"
msgstr ""

# c2525af268514e7990b713103cfe6346
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:467
msgid "Renders features using a different symbol for each range of values"
msgstr ""

# 3dbba9e688a549aa9fb8470e262e2440
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:470
msgid ""
"There might be also some custom renderer types, so never make an assumption "
"there are just these types. You can query :class:`QgsRendererV2Registry` "
"singleton to find out currently available renderers."
msgstr ""

# 9809a32626054b8da4bee66f7d595c87
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:474
msgid ""
"It is possible to obtain a dump of a renderer contents in text form --- can "
"be useful for debugging::"
msgstr ""

# 2a3973eda19048daa81807e7a2eb8640
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:482
msgid "Single Symbol Renderer"
msgstr ""

# 08370aae24a747bbb84e9e834bcef0ed
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:484
msgid ""
"You can get the symbol used for rendering by calling :func:`symbol` method "
"and change it with :func:`setSymbol` method (note for C++ devs: the renderer "
"takes ownership of the symbol.)"
msgstr ""

# 8ce0665a05c24c0abf340ef65d447e9c
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:491
msgid "Categorized Symbol Renderer"
msgstr ""

# ae8c5176596540f6970e44e4ee937a3c
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:493
msgid ""
"You can query and set attribute name which is used for classification: use :"
"func:`classAttribute` and :func:`setClassAttribute` methods."
msgstr ""

# efb206ec1dab4197908760a05651d699
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:496
msgid "To get a list of categories::"
msgstr ""

# 144ab6a346b141268bb92100440405c7
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:501
msgid ""
"Where :func:`value` is the value used for discrimination between "
"categories, :func:`label` is a text used for category description and :func:"
"`symbol` method returns assigned symbol."
msgstr ""

# cdbf342be3014e3088eb70b69c8e86b3
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:505
msgid ""
"The renderer usually stores also original symbol and color ramp which were "
"used for the classification: :func:`sourceColorRamp` and :func:"
"`sourceSymbol` methods."
msgstr ""

# 5f6ba3d047944f3e8f9bc03bd7411559
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:511
msgid "Graduated Symbol Renderer"
msgstr ""

# d509943c9c444396b07444e0fd2fc5f2
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:513
msgid ""
"This renderer is very similar to the categorized symbol renderer described "
"above, but instead of one attribute value per class it works with ranges of "
"values and thus can be used only with numerical attributes."
msgstr ""

# bb8901ad84b14b67906b022ae4804ea0
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:517
msgid "To find out more about ranges used in the renderer::"
msgstr ""

# 6087fc5697e34993aa39e1e7015a2364
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:527
msgid ""
"you can again use :func:`classAttribute` to find out classification "
"attribute name, :func:`sourceSymbol` and :func:`sourceColorRamp` methods.  "
"Additionally there is :func:`mode` method which determines how the ranges "
"were created: using equal intervals, quantiles or some other method."
msgstr ""

# 3f609e5ed69044a6bda5ede4733eb1e9
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:532
msgid ""
"If you wish to create your own graduated symbol renderer you can do so as "
"illustrated in the example snippet below (which creates a simple two class "
"arrangement)::"
msgstr ""

# f26182c1084b4f4ca531da36626bf6ce
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:589
msgid "Working with Symbols"
msgstr ""

# b412cfc3b9654d4b8fde966996e4649b
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:591
msgid ""
"For representation of symbols, there is :class:`QgsSymbolV2` base class with "
"three derived classes:"
msgstr ""

# b5be97b997e649ec9635b0094b77f30d
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:594
msgid ":class:`QgsMarkerSymbolV2` - for point features"
msgstr ""

# 81f311f5c8c74185a173389afe9d9875
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:595
msgid ":class:`QgsLineSymbolV2` - for line features"
msgstr ""

# f2d4a5a8a4ed4a3f8df41dd8aa6a462a
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:596
msgid ":class:`QgsFillSymbolV2` - for polygon features"
msgstr ""

# b6e006ec829c4a999823e68292e641b9
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:598
msgid ""
"**Every symbol consists of one or more symbol layers** (classes derived "
"from :class:`QgsSymbolLayerV2`). The symbol layers do the actual rendering, "
"the symbol class itself serves only as a container for the symbol layers."
msgstr ""

# d7b4eab2f86341788b8fc1c992890e9b
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:602
msgid ""
"Having an instance of a symbol (e.g. from a renderer), it is possible to "
"explore it: :func:`type` method says whether it is a marker, line or fill "
"symbol. There is a :func:`dump` method which returns a brief description of "
"the symbol. To get a list of symbol layers::"
msgstr ""

# dd58cb18d6ad47e791a2dbd25f41e86e
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:611
msgid ""
"To find out symbol's color use :func:`color` method and :func:`setColor` to "
"change its color. With marker symbols additionally you can query for the "
"symbol size and rotation with :func:`size` and :func:`angle` methods, for "
"line symbols there is :func:`width` method returning line width."
msgstr ""

# 986d866ff7344c88af65d5f2da7858b7
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:616
msgid "Size and width are in millimeters by default, angles are in degrees."
msgstr ""

# 1fea878b2bec4cbf899c9ce7dcc54816
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:621
msgid "Working with Symbol Layers"
msgstr ""

# dbaff0dd4b52484882087e68d3a495d7
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:623
msgid ""
"As said before, symbol layers (subclasses of :class:`QgsSymbolLayerV2`) "
"determine the appearance of the features.  There are several basic symbol "
"layer classes for general use. It is possible to implement new symbol layer "
"types and thus arbitrarily customize how features will be rendered. The :"
"func:`layerType` method uniquely identifies the symbol layer class --- the "
"basic and default ones are SimpleMarker, SimpleLine and SimpleFill symbol "
"layers types."
msgstr ""

# f2159ebbde624e8990340d71df474761
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:630
msgid ""
"You can get a complete list of the types of symbol layers you can create for "
"a given symbol layer class like this::"
msgstr ""

# b7b284d8ce514a20b69b13ff9730ae91
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:639
msgid "Output::"
msgstr ""

# e1bc8535ab70499a93f37862a032c43a
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:647
msgid ""
":class:`QgsSymbolLayerV2Registry` class manages a database of all available "
"symbol layer types."
msgstr ""

# c3d3b90808db4156829916993b680442
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:650
msgid ""
"To access symbol layer data, use its :func:`properties` method that returns "
"a key-value dictionary of properties which determine the appearance. Each "
"symbol layer type has a specific set of properties that it uses. "
"Additionally, there are generic methods :func:`color`, :func:`size`, :func:"
"`angle`, :func:`width` with their setter counterparts. Of course size and "
"angle is available only for marker symbol layers and width for line symbol "
"layers."
msgstr ""

# 5170ccef7ed74392a61657e880ee2696
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:660
msgid "Creating Custom Symbol Layer Types"
msgstr ""

# 4cf78792146a4d878ef956835d55694c
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:662
msgid ""
"Imagine you would like to customize the way how the data gets rendered. You "
"can create your own symbol layer class that will draw the features exactly "
"as you wish. Here is an example of a marker that draws red circles with "
"specified radius::"
msgstr ""

# 0e41328ddec64be98783ff806284383c
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:697
msgid ""
"The :func:`layerType` method determines the name of the symbol layer, it has "
"to be unique among all symbol layers. Properties are used for persistence of "
"attributes. :func:`clone` method must return a copy of the symbol layer with "
"all attributes being exactly the same. Finally there are rendering methods: :"
"func:`startRender` is called before rendering first feature, :func:"
"`stopRender` when rendering is done. And :func:`renderPoint` method which "
"does the rendering. The coordinates of the point(s) are already transformed "
"to the output coordinates."
msgstr ""

# 20dcdf621f564bbbaa9485a5bda604f2
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:706
msgid ""
"For polylines and polygons the only difference would be in the rendering "
"method: you would use :func:`renderPolyline` which receives a list of lines, "
"resp. :func:`renderPolygon` which receives list of points on outer ring as a "
"first parameter and a list of inner rings (or None) as a second parameter."
msgstr ""

# 35554051c4f24e53b86bb44aa9caf46e
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:711
msgid ""
"Usually it is convenient to add a GUI for setting attributes of the symbol "
"layer type to allow users to customize the appearance: in case of our "
"example above we can let user set circle radius. The following code "
"implements such widget::"
msgstr ""

# be7ec363b53e483ebfb11d9a906e79f7
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:744
msgid ""
"This widget can be embedded into the symbol properties dialog. When the "
"symbol layer type is selected in symbol properties dialog, it creates an "
"instance of the symbol layer and an instance of the symbol layer widget. "
"Then it calls :func:`setSymbolLayer` method to assign the symbol layer to "
"the widget. In that method the widget should update the UI to reflect the "
"attributes of the symbol layer. :func:`symbolLayer` function is used to "
"retrieve the symbol layer again by the properties dialog to use it for the "
"symbol."
msgstr ""

# 4f33ca5c39394361ae430f3cf0bd6860
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:752
msgid ""
"On every change of attributes, the widget should emit :func:`changed()` "
"signal to let the properties dialog update the symbol preview."
msgstr ""

# c1b727962f184bf0af40ccdba9e0fea2
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:755
msgid ""
"Now we are missing only the final glue: to make QGIS aware of these new "
"classes. This is done by adding the symbol layer to registry. It is possible "
"to use the symbol layer also without adding it to the registry, but some "
"functionality will not work: e.g. loading of project files with the custom "
"symbol layers or inability to edit the layer's attributes in GUI."
msgstr ""

# 042df9f96c3d4893a00eba4e16897f1c
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:761
msgid "We will have to create metadata for the symbol layer::"
msgstr ""

# dc20ea895cc94614869ac937905e4796
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:777
msgid ""
"You should pass layer type (the same as returned by the layer) and symbol "
"type (marker/line/fill) to the constructor of parent class. :func:"
"`createSymbolLayer` takes care of creating an instance of symbol layer with "
"attributes specified in the `props` dictionary. (Beware, the keys are "
"QString instances, not \"str\" objects). And there is :func:"
"`createSymbolLayerWidget` method which returns settings widget for this "
"symbol layer type."
msgstr ""

# 720a3f3f5e28410db4449ec948078277
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:784
msgid ""
"The last step is to add this symbol layer to the registry --- and we are "
"done."
msgstr ""

# 703c523120994e29b43961a8ed7e4dbb
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:790
msgid "Creating Custom Renderers"
msgstr ""

# b1a7a175dee84af68e86c1e8cce809c0
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:792
msgid ""
"It might be useful to create a new renderer implementation if you would like "
"to customize the rules how to select symbols for rendering of features. Some "
"use cases where you would want to do it: symbol is determined from a "
"combination of fields, size of symbols changes depending on current scale "
"etc."
msgstr ""

# 6fb4d737c7b44ac5845979967dc3c2dd
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:797
msgid ""
"The following code shows a simple custom renderer that creates two marker "
"symbols and chooses randomly one of them for every feature::"
msgstr ""

# 46994c766d48474fb512a312d5595ee2
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:824
msgid ""
"The constructor of parent :class:`QgsFeatureRendererV2` class needs renderer "
"name (has to be unique among renderers). :func:`symbolForFeature` method is "
"the one that decides what symbol will be used for a particular feature. :"
"func:`startRender` and :func:`stopRender` take care of initialization/"
"finalization of symbol rendering. :func:`usedAttributes` method can return a "
"list of field names that renderer expects to be present. Finally :func:"
"`clone` function should return a copy of the renderer."
msgstr ""

# fe24fad190fa4d44beb891435ba1a9c4
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:832
msgid ""
"Like with symbol layers, it is possible to attach a GUI for configuration of "
"the renderer. It has to be derived from :class:`QgsRendererV2Widget`. The "
"following sample code creates a button that allows user to set symbol of the "
"first symbol::"
msgstr ""

# c77cafff43c94e9785a2f28b5a1ff69c
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:861
msgid ""
"The constructor receives instances of the active layer (:class:"
"`QgsVectorLayer`), the global style (:class:`QgsStyleV2`) and current "
"renderer. If there is no renderer or the renderer has different type, it "
"will be replaced with our new renderer, otherwise we will use the current "
"renderer (which has already the type we need). The widget contents should be "
"updated to show current state of the renderer. When the renderer dialog is "
"accepted, widget's :func:`renderer` method is called to get the current "
"renderer --- it will be assigned to the layer."
msgstr ""

# f3fa2cd4f6924747ad6cacb9e168a8a3
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:870
msgid ""
"The last missing bit is the renderer metadata and registration in registry, "
"otherwise loading of layers with the renderer will not work and user will "
"not be able to select it from the list of renderers. Let us finish our "
"RandomRenderer example::"
msgstr ""

# dc7ea052e4a246e7bbe7797c9f5a222e
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:886
msgid ""
"Similarly as with symbol layers, abstract metadata constructor awaits "
"renderer name, name visible for users and optionally name of renderer's "
"icon. :func:`createRenderer` method passes :class:`QDomElement` instance "
"that can be used to restore renderer's state from DOM tree. :func:"
"`createRendererWidget` method creates the configuration widget. It does not "
"have to be present or can return `None` if the renderer does not come with "
"GUI."
msgstr ""

# 63279ea71d9a4682a4f1bcf6a55f761a
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:893
msgid ""
"To associate an icon with the renderer you can assign it in :class:"
"`QgsRendererV2AbstractMetadata` constructor as a third (optional) argument "
"--- the base class constructor in the RandomRendererMetadata :func:"
"`__init__` function becomes::"
msgstr ""

# 098ce77362aa4f4fa84277ec32380219
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:903
msgid ""
"The icon can be associated also at any later time using :func:`setIcon` "
"method of the metadata class. The icon can be loaded from a file (as shown "
"above) or can be loaded from a `Qt resource <http://qt.nokia.com/doc/4.5/"
"resources.html>`_ (PyQt4 includes .qrc compiler for Python)."
msgstr ""

# fbb564a9edb94d9fb1705ad29e0e734e
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:909
msgid "Further Topics"
msgstr ""

# fd56c6984ef44092aa5fd734b5a4820e
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:912
msgid "creating/modifying symbols"
msgstr ""

# ba88375efb0f4469908e6d2010533022
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:913
msgid "working with style (:class:`QgsStyleV2`)"
msgstr ""

# df9a75e1d91446b498b277ec749f343d
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:914
msgid "working with color ramps (:class:`QgsVectorColorRampV2`)"
msgstr ""

# 3b7a502b14934412aa50ab300c9ca049
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:915
msgid "rule-based renderer"
msgstr ""

# cef90e5d554746ed8b163eda2f919f30
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:916
msgid "exploring symbol layer and renderer registries"
msgstr ""

# 6df0b480061c45829c66ad1a1f8ffb0a
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:921
msgid "Old Symbology"
msgstr ""

# d911d7ba7fe7453299b72239e7d97ef6
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:923
msgid ""
"A symbol determines color, size and other properties of the feature. "
"Renderer associated with the layer decides what symbol will be used for "
"particular feature. There are four available renderers:"
msgstr ""

# 3a31a4aed7604aee8e7eeed554eaee6d
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:927
msgid ""
"single symbol renderer (:class:`QgsSingleSymbolRenderer`) --- all features "
"are rendererd with the same symbol."
msgstr ""

# f3732cd0e53d4bf9a6319948fc68d222
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:929
msgid ""
"unique value renderer (:class:`QgsUniqueValueRenderer`) --- symbol for each "
"feature is choosen from attribute value."
msgstr ""

# fe1543d0733743178dbdaae57bc124f5
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:931
msgid ""
"graduated symbol renderer (:class:`QgsGraduatedSymbolRenderer`) --- a symbol "
"is applied to a subgroup (class) of features, which is calculated on a "
"numeric field"
msgstr ""

# 0d81da954eba454c86f4b1c05c094f37
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:934
msgid "continuous color renderer (:class:`QgsContinuousSymbolRenderer`)"
msgstr ""

# f1a842f562a84458880155e0f7cbcd4f
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:936
msgid "How to create a point symbol::"
msgstr ""

# cd311770a81b45ea98ef126678c33d5d
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:946
msgid ""
"The :func:`setNamedPointSymbol` method determines the shape of the symbol. "
"There are two classes: hardcoded symbols (prefixed ``hard:``) and SVG "
"symbols (prefixed ``svg:``). The following hardcoded symbols are available: "
"``circle``, ``rectangle``, ``diamond``, ``pentagon``, ``cross``, ``cross2``, "
"``triangle``, ``equilateral_triangle``, ``star``, ``regular_star``, "
"``arrow``."
msgstr ""

# 837df998921e4f95984dd64a605ce610
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:952
msgid "How to create an SVG symbol::"
msgstr ""

# 1d3b8e960cc7460fb7a54b7a4362ad1e
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:958
msgid "SVG symbols do not support setting colors, fill and line styles."
msgstr ""

# a369dc4e5bf0450e83aa762f4afec19f
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:960
msgid "How to create a line symbol::"
msgstr ""

# 28e452a21db442aeb2efa59ba389f7bd
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:964
msgid "How to create a fill symbol::"
msgstr ""

# 504818256ac54c3da9e069bcb3de4aed
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:968
msgid "Create a single symbol renderer::"
msgstr ""

# b5f09ccde3984c318fc8afdeb70651bf
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:973
msgid "Assign the renderer to a layer::"
msgstr ""

# 4c57922ad41b4e1fb386fdebbac5df9f
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:977
msgid "Create unique value renderer::"
msgstr ""

# 18964dd0d46d449388efa27731b7a7b7
#: ../../source/docs/pyqgis_developer_cookbook/03_vector.rst:981
msgid "Create graduated symbol renderer::"
msgstr ""
