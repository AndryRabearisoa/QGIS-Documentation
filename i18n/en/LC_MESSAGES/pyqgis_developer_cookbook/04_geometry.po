# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-10-24 12:23\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:11
# ad88a0dcbd114db3a640334803b1a682
msgid "Geometry Handling"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:13
# 404c02cc03764fb78791f9c196c5d107
msgid "Points, linestrings, polygons that represent a spatial feature are commonly referred to as geometries. In QGIS they are represented with :class:`QgsGeometry` class. All possible geometry types are nicely shown in `JTS discussion page <http://www.vividsolutions.com/jts/discussion.htm#spatialDataModel>`_."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:18
# 61783192b5284003870609b4107e9edc
msgid "Sometimes one geometry is actually a collection of simple (single-part) geometries. Such a geometry is called multi-part geometry. If it contains just one type of simple geometry, we call it multi-point, multi-linestring or multi-polygon. For example, a country consisting of multiple islands can be represented as a multi-polygon."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:24
# 89d86df8e56540fa94a6d89e13f97a50
msgid "The coordinates of geometries can be in any coordinate reference system (CRS). When fetching features from a layer, associated geometries will have coordinates in CRS of the layer."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:31
# f89a1da77de0472c8ba0d8ee39e7040b
msgid "Geometry Construction"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:33
# f08dc41eb4644f5c8adbedf3551c2cb9
msgid "There are several options how to create a geometry:"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:35
# ef4a8815aa7a4598b05f48608c4dd5f7
msgid "from coordinates::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:41
# 1d14bdd35e2349d7b8f567f6126b17f9
msgid "Coordinates are given using :class:`QgsPoint` class."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:43
# b76bb647d9cf44e786480ad224dbc057
msgid "Polyline (Linestring) is represented by a list of points. Polygon is represented by a list of linear rings (i.e. closed linestrings). First ring is outer ring (boundary), optional subsequent rings are holes in the polygon."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:47
# a048609ca3074fe5b6c746dedfaf4f17
msgid "Multi-part geometries go one level further: multi-point is a list of points, multi-linestring is a list of linestrings and multi-polygon is a list of polygons."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:51
# 7b6e6e25df1c4c4db89e1aa820f2ab35
msgid "from well-known text (WKT)::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:55
# faa9f05f959a4fc4b4fb63d7e02ff154
msgid "from well-known binary (WKB)::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:64
# e5de6a9788d5481282b6a015f4ea0f60
msgid "Access to Geometry"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:66
# 5447d43ecf6c439dbca420a86125a040
msgid "First, you should find out geometry type, :func:`wkbType` method is the one to use --- it returns a value from QGis.WkbType enumeration::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:78
# 89e945d925f14bcabcc743805dd21adb
msgid "As an alternative, one can use :func:`type` method which returns a value from QGis.GeometryType enumeration. There is also a helper function :func:`isMultipart` to find out whether a geometry is multipart or not."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:82
# 25e60c9296f2465da9bbd59fd9e7e8ac
msgid "To extract information from geometry there are accessor functions for every vector type. How to use accessors::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:92
# 2563de628e2c4c40a2bb59449ce5219e
msgid "Note: the tuples (x,y) are not real tuples, they are :class:`QgsPoint` objects, the values are accessible with :func:`x` and :func:`y` methods."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:95
# 2c899dff5754486684b017c02b058678
msgid "For multipart geometries there are similar accessor functions: :func:`asMultiPoint`, :func:`asMultiPolyline`, :func:`asMultiPolygon()`."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:101
# cd35e781585247eeb45598a75e529ce3
msgid "Geometry Predicates and Operations"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:103
# b1efa0c7e0bd4eb8899740d483e4a6ba
msgid "QGIS uses GEOS library for advanced geometry operations such as geometry predicates (:func:`contains`, :func:`intersects`, ...) and set operations (:func:`union`, :func:`difference`, ...)"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:108
# c5535fd7160b4a90b63867c7e46ece56
msgid "**TODO:**"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:110
# 736d555fc0b14467bc09fa98494fb1b0
msgid ":func:`area`, :func:`length`, :func:`distance`"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:111
# fc8f17a8e3474fa987a7162a6401b31b
msgid ":func:`transform`"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/04_geometry.rst:112
# a99c28a280ea460788110185f7bffa68
msgid "available predicates and set operations"
msgstr ""

