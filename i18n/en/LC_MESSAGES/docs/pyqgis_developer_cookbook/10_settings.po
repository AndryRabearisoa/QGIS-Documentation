# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-10-24 12:23\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/pyqgis_developer_cookbook/10_settings.rst:11
# 2ea95a8bd1b8465aab6eb24fef94d7da
msgid "Reading And Storing Settings"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/10_settings.rst:13
# e0ebd122310a481f87589b8a3e3d1b15
msgid "Many times it is useful for a plugin to save some variables so that the user does not have to enter or select them again next time the plugin is run."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/10_settings.rst:16
# 5ee15e4c6e9048b0a5dbf2e34b8dd175
msgid "These variables can be saved a retrieved with help of Qt and QGIS API. For each variable, you should pick a key that will be used to access the variable --- for user's favourite color you could use key \"favourite_color\" or any other meaningful string. It is recommended to give some structure to naming of keys."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/10_settings.rst:21
# bb9bb12912014e25a9d02da42f851e35
msgid "We can make difference between several types of settings:"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/10_settings.rst:25
# 9155de6c55064cf7a6c7aff61f38b527
msgid "**global settings** --- they are bound to the user at particular machine. QGIS itself stores a lot of global settings, for example, main window size or default snapping tolerance. This functionality is provided directly by Qt framework by the means of QSettings class. By default, this class stores settings in system's \"native\" way of storing settings, that is --- registry (on Windows), .plist file (on Mac OS X) or .ini file (on Unix). The `QSettings documentation <http://doc.qt.nokia.com/stable/qsettings.html>`_ is comprehensive, so we will provide just a simple example::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/10_settings.rst:46
# 1d9de08e4f2048ad8e68f39599f5e6e3
msgid "Qt uses QVariant instances for variable values in setValue() and value() methods. Your values are automagically converted from Python to QVariant instances, however the conversion from QVariant to Python is not automatic: that's why we use the to*() methods. Few more things to note here:"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/10_settings.rst:51
# 64eaa1d8a5884be09c98d59748874c07
msgid "the second parameter to value() method is optional and states the default value if there is no previous value set"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/10_settings.rst:53
# 88c9b508f29045d29cdf608308dc5267
msgid "toString() returns a QString instance, not a Python string"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/10_settings.rst:54
# 9acb06955418439da6c062e2a5e00546
msgid "toInt() and toDouble() return tuples (value, ok) --- the second item indicates const:`True` if whether the conversion from QVariant to the number went fine --- in this example we ignore that indicator and only take the value."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/10_settings.rst:60
# 424af6411cd44af1a4e21b037dd059bf
msgid "**project settings** --- vary between different projects and therefore they are connected with a project file. Map canvas background or destination coordinate reference system (CRS) are examples --- white background and WGS84 might be suitable for one project, while yellow background and UTM projection for another one. An example of usage follows::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/10_settings.rst:76
# 287b63c57299407c856d36dd7aaac2c2
msgid "Hopefully the QgsProject class will be updated in future to provide API similar to the one of QSettings class. Due to some limitations of Python bindings, it is not possible to save floating point numbers."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/10_settings.rst:82
# a89661488e464ebf916cbb3af9b4e83d
msgid "**map layer settings** --- these settings are related to a particular instance of a map layer with a project. They are *not* connected with underlying data source of a layer, so if you create two map layer instances of one shapefile, they will not share the settings. The settings are stored in project file, so if the user opens the project again, the layer-related settings will be there again. This functionality has been added in QGIS v1.4. The API is similar to QSettings --- it takes and returns QVariant instances::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/10_settings.rst:98
# c2c117c48ca046f3afdb15bf0003ca6e
msgid "Keys for settings that can be shared among plugins"
msgstr ""

