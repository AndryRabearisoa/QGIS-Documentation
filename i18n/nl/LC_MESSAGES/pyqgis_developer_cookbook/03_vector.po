# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-10-26 23:10\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:9
# f7c37d4c52354796946db34f14a0a0f8
msgid "Using Vector Layers"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:11
# f601ab4d3cbf433486238aec78be7e6b
msgid "This section summarizes various actions that can be done with vector layers."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:18
# b579ce0115474200bac43a2e73d940cb
msgid "Iterating over Vector Layer"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:20
# a21978e1a61f4d7384370e1312203ad5
msgid "Below is an example how to go through the features of the layer. To read features from layer, initialize the retieval with :func:`select` and then use :func:`nextFeature` calls::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:64
# 68e9c57ab0d94120833fdc5dc4de200b
msgid ":func:`select` gives you flexibility in what data will be fetched. It can get 4 arguments, all of them are optional:"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:68
# dcb9301e795c495dbf5385a11fb220b6
msgid "List of attributes which should be fetched. Default: empty list"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:70
# b91b23f1f9254392859675c9a6054cb4
msgid "Spatial filter. If empty rect is given (:obj:`QgsRectangle()`), all features are fetched. Default: empty rect"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:73
# c1a8a526f3a449a091a888eee2f73023
msgid "Whether geometry of the feature should be fetched. Default: :const:`True`"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:75
# 75ec2fee9b0d410b96c7a675da472c8c
msgid "When using spatial filter, this argument says whether accurate test for intersection should be done or whether test on bounding box suffices. This is needed e.g. for feature identification or selection. Default: :const:`False`"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:80
# 9c9dde783de140768a49ab504896a062
msgid "Some examples::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:92
# b3c8ed0076be4b1ab6fd3bca9b7624dd
msgid "To obtain field index from its name, use provider's :func:`fieldNameIndex` function::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:104
# 2bd335a466734d91972df98f87056875
msgid "Modifying Vector Layers"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:106
# e9130534f88345a7a57814908f143dc8
msgid "Most vector data providers support editing of layer data. Sometimes they support just a subset of possible editing actions. Use the :func:`capabilities` function to find out what set of functionality is supported::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:112
# e877c7abad914c02bfdfe82e42ba7172
msgid "By using any of following methods for vector layer editing, the changes are directly committed to the underlying data store (a file, database etc). In case you would like to do only temporary changes, skip to the next section that explains how to do :ref:`modifications with editing buffer <editing-buffer>`."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:118
# d981cd8df3f9496592701f83a622d68c
msgid "Add Features"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:120
# 535279f870634d948e67612391826747
msgid "Create some :class:`QgsFeature` instances and pass a list of them to provider's :func:`addFeatures` method. It will return two values: result (true/false) and list of added features (their ID is set by the data store)::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:132
# 11e14a12080545d9ac46c516f65b201a
msgid "Delete Features"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:134
# 5a6954506f804fb08779e8170540cb3d
msgid "To delete some features, just provide a list of their feature IDs::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:140
# 8bbbb10395da4393994514aea76ccfa4
msgid "Modify Features"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:142
# c5491ce55e424c6c884cec8aeba4e472
msgid "It is possible to either change feature's geometry or to change some attributes. The following example first changes values of attributes with index 0 and 1, then it changes the feature's geometry::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:157
# 769639bed5d548148a5431bdefae11b6
msgid "Adding and Removing Fields"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:159
# 28d6067cf06344a08f62cd19a296c981
msgid "To add fields (attributes), you need to specify a list of field defnitions. For deletion of fields just provide a list of field indexes. ::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:173
# 1ac63616d0694e18b62db80dbe7977c1
msgid "Modifying Vector Layers with an Editing Buffer"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:175
# aec633d51986494ca1dea3df1172a96f
msgid "When editing vectors within QGIS application, you have to first start editing mode for a particular layer, then do some modifications and finally commit (or rollback) the changes. All the changes you do are not written until you commit them --- they stay in layer's in-memory editing buffer. It is possible to use this functionality also programmatically --- it is just another method for vector layer editing that complements the direct usage of data providers. Use this option when providing some GUI tools for vector layer editing, since this will allow user to decide whether to commit/rollback and allows the usage of undo/redo. When committing changes, all changes from the editing buffer are saved to data provider."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:186
# 31d3a71aaa5345469fa24e9848238210
msgid "To find out whether a layer is in editing mode, use :func:`isEditing` --- the editing functions work only when the editing mode is turned on. Usage of editing functions::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:205
# 6c468a70120e4f06bd53c49dccd26c6e
msgid "In order to make undo/redo work properly, the above mentioned calls have to be wrapped into undo commands. (If you do not care about undo/redo and want to have the changes stored immediately, then you will have easier work by :ref:`editing with data provider <editing>`.) How to use the undo functionality ::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:223
# 1b8e6e53d98f4bda8594bd696d10e7bd
msgid "The :func:`beginEndCommand` will create an internal \"active\" command and will record subsequent changes in vector layer. With the call to :func:`endEditCommand` the command is pushed onto the undo stack and the user will be able to undo/redo it from GUI. In case something went wrong while doing the changes, the :func:`destroyEditCommand` method will remove the command and rollback all changes done while this command was active."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:230
# b67fb3b1a5fe4ea1a597ccfd53fc14b3
msgid "To start editing mode, there is :func:`startEditing` method, to stop editing there are :func:`commitChanges` and :func:`rollback()` --- however normally you should not need these methods and leave this functionality to be triggered by the user."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:239
# 7d112d2666784683996318d3d236b52d
msgid "Using Spatial Index"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:242
# b8220f9766af42d98f05597cebe2e610
msgid "Intro to spatial indexing"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:244
# 40d092a07f714a60abce173c1e7dc11e
msgid "create spatial index --- the following code creates an empty index::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:248
# 88c2c46c9c594f5c8117639b4548244e
msgid "add features to index --- index takes :class:`QgsFeature` object and adds it to the internal data structure. You can create the object manually or use one from previous call to provider's :func:`nextFeature()` ::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:254
# a9efee5c4e4849359c3f0eb5d50c9f55
msgid "once spatial index is filled with some values, you can do some queries::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:266
# 402a7f2cfd284f38bd1660c4a6fb45ce
msgid "Writing Vector Layers"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:268
# 9f3fd7aa0b0c4443a1408b7e4080b26d
msgid "You can write vector layer files using :class:`QgsVectorFileWriter` class. It supports any other kind of vector file that OGR supports (shapefiles, GeoJSON, KML and others)."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:272
# e597ee3f6155479bbb41db0ddc954fdb
msgid "There are two possibilities how to export a vector layer:"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:274
# 8a31a760ff9042f6ac849b34df3493dc
msgid "from an instance of :class:`QgsVectorLayer`::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:285
# 71b8bb689b544eeab7a43b25f6fa5d81
msgid "Third parameter specifies output text encoding. Only some drivers need this for correct operation - shapefiles are one of those --- however in case you are not using international characters you do not have to care much about the encoding. The fourth parameter that we left as None may specify destination CRS --- if a valid instance of :class:`QgsCoordinateReferenceSystem` is passed, the layer is transformed to that CRS."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:292
# d128b986e4fb4834958d678da249c6bb
msgid "For valid driver names please consult the `supported formats by OGR`_ --- you should pass the value in \"Code\" column as the driver name. Optionally you can set whether to export only selected features, pass further driver-specific options for creation or tell the writer not to create attributes --- look into the documentation for full syntax."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:301
# 76cd05c9719d4fc691249e9485784847
msgid "directly from features::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:332
# 0c13fcd1e0f64d1a92833aecda6e68a0
msgid "Memory Provider"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:334
# 5805f7073be54559934d70f40623cdb6
msgid "Memory provider is intended to be used mainly by plugin or 3rd party app developers. It does not store data on disk, allowing developers to use it as a fast backend for some temporary layers."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:338
# cb7f7f79301b4685812d00b6f9e358fd
msgid "The provider supports string, int and double fields."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:340
# 35b578b972cf4b7b91a79083578165c9
msgid "The memory provider also supports spatial indexing, which is enabled by calling the provider's :func:`createSpatialIndex` function. Once the spatial index is created you will be able to iterate over features within smaller regions faster (since it's not necessary to traverse all the features, only those in specified rectangle)."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:346
# 4cf66d093e844acfa79d83a4eb68a27a
msgid "A memory provider is created by passing ``\"memory\"`` as the provider string to the :class:`QgsVectorLayer` constructor."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:349
# 020312cf3b1642d4bf116148dcafd458
msgid "The constructor also takes a URI defining the geometry type of the layer, one of: ``\"Point\"``, ``\"LineString\"``, ``\"Polygon\"``, ``\"MultiPoint\"``, ``\"MultiLineString\"``, or ``\"MultiPolygon\"``."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:353
# 8c895554eb654584a4a0f484fc8811f3
msgid "From QGIS version 1.7 the URI can also specify the coordinate reference system, fields, and indexing of the memory provider in the URI. The syntax is:"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:357
# f14c08d709b34e3ba76863dabad6ddea
msgid "Specifies the coordinate reference system, where definition may be any of the forms accepted by :func:`QgsCoordinateReferenceSystem.createFromString`"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:361
# d8a1a32fabbf425da562e70889148418
msgid "Specifies that the provider will use a spatial index"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:364
# df4dee4216874a52b629f087691f6e89
msgid "Specifies an attribute of the layer.  The attribute has a name, and optionally a type (integer, double, or string), length, and precision. There may be multiple field definitions."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:368
# 26a16edc954d4b5ea6ecc21fc171b0d7
msgid "The following example of a URI incorporates all these options::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:372
# 681b888111864eea87ba0c35adad7ea0
msgid "The following example code illustrates creating and populating a memory provider::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:395
# 0ff57a9015a648f0af117745d2047f56
msgid "Finally, let's check whether everything went well::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:412
# 6ca01aa3bc7449f694971704cc992dba
msgid "Appearance (Symbology) of Vector Layers"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:414
# 6baf1f0b0b054ff1a3c08b11f8004be6
msgid "When a vector layer is being rendered, the appearance of the data is given by **renderer** and **symbols** associated with the layer.  Symbols are classes which take care of drawing of visual representation of features, while renderers determine what symbol will be used for a particular feature."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:419
# da9c9b0611a44dff84c4baaceabbe5f0
msgid "In QGIS v1,4 a new vector rendering stack has been introduced in order to overcome the limitations of the original implementation. We refer to it as new symbology or symbology-ng (new generation), the original rendering stack is also called old symbology. Each vector layer uses either new symbology or old symbology, but never both at once or neither of them. It's not a global setting for all layers, so some layers might use new symbology while others still use old symbology. In QGIS options the user can specify what symbology should be used by default when layers are loaded.  The old symbology will be kept in further QGIS v1.x releases for compatibility and we plan to remove it in QGIS v2.0."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:430
# f46d1899561a4528926920ba1b349a0f
msgid "How to find out which implementation is currently in use::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:440
# c7842b60294d448f98d68aaa14589791
msgid "Note: if you plan to support also earlier versions (i.e. QGIS < 1.4), you should first check whether the :func:`isUsingRendererV2` method exists --- if not, only old symbology is available::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:447
# 62f25cde542640349f45e09c77c806a0
msgid "We are going to focus primarily on new symbology because it has better capabilities are more options for customization."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:453
# 1969500bcbfd45d18a690d192b9d8fd8
msgid "New Symbology"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:455
# 14331e06851847d3990e77f74beda8ab
msgid "Now that we have a reference to a renderer from the previous section, let us explore it a bit::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:460
# 9afcf7c71df84ca497e706fe66a475bd
msgid "There are several known renderer types available in QGIS core library:"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:463
# 70e6b7f459384ac9bdd5a87bd07065b2
msgid "Type"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:463
# 030cf56613874083ab91ce92f5230af1
msgid "Class"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:463
# 33226b507a924c7684009d689ef898a0
msgid "Description"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:465
# 4adbe5cb09814b6e9092d1aea87654a9
msgid "singleSymbol"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:465
# 076a48cbb03549bbb876bdc650f2a345
msgid ":class:`QgsSingleSymbolRendererV2`"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:465
# 73c468cc194b440f822e2165511f9dd3
msgid "Renders all features with the same symbol"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:466
# d87198d672c141a4b000be7242d17a6e
msgid "categorizedSymbol"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:466
# 1c3e4337edea4e1ba7580dec58ba52e6
msgid ":class:`QgsCategorizedSymbolRendererV2`"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:466
# 35876fea1cd84934bc45816d69f839e5
msgid "Renders features using a different symbol for each category"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:467
# 45a930d8537e4897b70adfff5d57608f
msgid "graduatedSymbol"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:467
# 7c1ff06aafb942348017ba40208f6523
msgid ":class:`QgsGraduatedSymbolRendererV2`"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:467
# 3c570f719d084c60b75838ea6a9daf8e
msgid "Renders features using a different symbol for each range of values"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:470
# 26647018b5ec417d97c71b293296ef4c
msgid "There might be also some custom renderer types, so never make an assumption there are just these types. You can query :class:`QgsRendererV2Registry` singleton to find out currently available renderers."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:474
# 84dfea44344549c48384f5c15e3f2acb
msgid "It is possible to obtain a dump of a renderer contents in text form --- can be useful for debugging::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:482
# c77c6f77bec64bd69caecedc397fad40
msgid "Single Symbol Renderer"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:484
# b8a4288edf0a428887d405e0046d997b
msgid "You can get the symbol used for rendering by calling :func:`symbol` method and change it with :func:`setSymbol` method (note for C++ devs: the renderer takes ownership of the symbol.)"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:491
# eb55db59047e4a15ba30b132722c471c
msgid "Categorized Symbol Renderer"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:493
# 8c7b0b5670c24a64af94707e48a14925
msgid "You can query and set attribute name which is used for classification: use :func:`classAttribute` and :func:`setClassAttribute` methods."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:496
# 09e5ad7033a944019efe0768be486bb9
msgid "To get a list of categories::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:501
# b72c643b0f0a4df79cec0a65b52ecb99
msgid "Where :func:`value` is the value used for discrimination between categories, :func:`label` is a text used for category description and :func:`symbol` method returns assigned symbol."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:505
# fe4e11db7f4149468f095297b16ed4f4
msgid "The renderer usually stores also original symbol and color ramp which were used for the classification: :func:`sourceColorRamp` and :func:`sourceSymbol` methods."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:511
# 2c3bada390194337acfc0afea2e4d5f9
msgid "Graduated Symbol Renderer"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:513
# dc8c340b43e8468c8f613c1b887c0dc1
msgid "This renderer is very similar to the categorized symbol renderer described above, but instead of one attribute value per class it works with ranges of values and thus can be used only with numerical attributes."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:517
# f9c83051d84b4cf78c5d06754f18b8e4
msgid "To find out more about ranges used in the renderer::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:527
# e08088bd901546d7a5b01c5e7140a8e5
msgid "you can again use :func:`classAttribute` to find out classification attribute name, :func:`sourceSymbol` and :func:`sourceColorRamp` methods.  Additionally there is :func:`mode` method which determines how the ranges were created: using equal intervals, quantiles or some other method."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:532
# 585d5f404cf14b9e8a9545ace9016073
msgid "If you wish to create your own graduated symbol renderer you can do so as illustrated in the example snippet below (which creates a simple two class arrangement)::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:589
# e099f2abf4bf428d8f490637a0d9b751
msgid "Working with Symbols"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:591
# 44caea03597b4e77ab76cf62983729f2
msgid "For representation of symbols, there is :class:`QgsSymbolV2` base class with three derived classes:"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:594
# fe7888da15d94fd4aa2d3a955a611ef5
msgid ":class:`QgsMarkerSymbolV2` - for point features"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:595
# 24a29f36cec346f185c4e1d693a8137a
msgid ":class:`QgsLineSymbolV2` - for line features"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:596
# 74b94c535a744e3da74d887875c56c1d
msgid ":class:`QgsFillSymbolV2` - for polygon features"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:598
# 493df54181fb41cf9f78acfdd3e537dd
msgid "**Every symbol consists of one or more symbol layers** (classes derived from :class:`QgsSymbolLayerV2`). The symbol layers do the actual rendering, the symbol class itself serves only as a container for the symbol layers."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:602
# 88b30170199143cfaf5d2e6497b4707a
msgid "Having an instance of a symbol (e.g. from a renderer), it is possible to explore it: :func:`type` method says whether it is a marker, line or fill symbol. There is a :func:`dump` method which returns a brief description of the symbol. To get a list of symbol layers::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:611
# adcf5a0cd59a4d6ea034368fcf4f3ae6
msgid "To find out symbol's color use :func:`color` method and :func:`setColor` to change its color. With marker symbols additionally you can query for the symbol size and rotation with :func:`size` and :func:`angle` methods, for line symbols there is :func:`width` method returning line width."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:616
# 5fdb53006e3f49d2b6892d9701dc4cf6
msgid "Size and width are in millimeters by default, angles are in degrees."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:621
# 7cf1d6e821104b1ea880cc72c94b03dd
msgid "Working with Symbol Layers"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:623
# 3b8a2f5fe9cd49b3867be1d6c0062c88
msgid "As said before, symbol layers (subclasses of :class:`QgsSymbolLayerV2`) determine the appearance of the features.  There are several basic symbol layer classes for general use. It is possible to implement new symbol layer types and thus arbitrarily customize how features will be rendered. The :func:`layerType` method uniquely identifies the symbol layer class --- the basic and default ones are SimpleMarker, SimpleLine and SimpleFill symbol layers types."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:630
# 0e66ba07fbbe419fb1619bdc1b547145
msgid "You can get a complete list of the types of symbol layers you can create for a given symbol layer class like this::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:639
# a0c22916e19744999f01dcd2c4be9010
msgid "Output::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:647
# b5123f0a99194637834d5dee8143f892
msgid ":class:`QgsSymbolLayerV2Registry` class manages a database of all available symbol layer types."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:650
# d2d4b82af909476581c4ab1bc985a3fc
msgid "To access symbol layer data, use its :func:`properties` method that returns a key-value dictionary of properties which determine the appearance. Each symbol layer type has a specific set of properties that it uses. Additionally, there are generic methods :func:`color`, :func:`size`, :func:`angle`, :func:`width` with their setter counterparts. Of course size and angle is available only for marker symbol layers and width for line symbol layers."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:660
# 18cee6e4f5b546b9b03178e7015165c2
msgid "Creating Custom Symbol Layer Types"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:662
# 35d9e859749b415f9fd2652b08e20d8c
msgid "Imagine you would like to customize the way how the data gets rendered. You can create your own symbol layer class that will draw the features exactly as you wish. Here is an example of a marker that draws red circles with specified radius::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:697
# eecfe5e8434c4508a40a072c1f0dca8b
msgid "The :func:`layerType` method determines the name of the symbol layer, it has to be unique among all symbol layers. Properties are used for persistence of attributes. :func:`clone` method must return a copy of the symbol layer with all attributes being exactly the same. Finally there are rendering methods: :func:`startRender` is called before rendering first feature, :func:`stopRender` when rendering is done. And :func:`renderPoint` method which does the rendering. The coordinates of the point(s) are already transformed to the output coordinates."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:706
# d503e5ef108a4355a95a2a74c6b5b361
msgid "For polylines and polygons the only difference would be in the rendering method: you would use :func:`renderPolyline` which receives a list of lines, resp. :func:`renderPolygon` which receives list of points on outer ring as a first parameter and a list of inner rings (or None) as a second parameter."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:711
# 513b3cb319764220837af39130954d53
msgid "Usually it is convenient to add a GUI for setting attributes of the symbol layer type to allow users to customize the appearance: in case of our example above we can let user set circle radius. The following code implements such widget::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:744
# f58f9f153d41402cb109e5bdc42af4d2
msgid "This widget can be embedded into the symbol properties dialog. When the symbol layer type is selected in symbol properties dialog, it creates an instance of the symbol layer and an instance of the symbol layer widget. Then it calls :func:`setSymbolLayer` method to assign the symbol layer to the widget. In that method the widget should update the UI to reflect the attributes of the symbol layer. :func:`symbolLayer` function is used to retrieve the symbol layer again by the properties dialog to use it for the symbol."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:752
# 4107c497ca134136a1406df9c676778e
msgid "On every change of attributes, the widget should emit :func:`changed()` signal to let the properties dialog update the symbol preview."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:755
# 97764c1c16ea42f49d2dccf7f54c2659
msgid "Now we are missing only the final glue: to make QGIS aware of these new classes. This is done by adding the symbol layer to registry. It is possible to use the symbol layer also without adding it to the registry, but some functionality will not work: e.g. loading of project files with the custom symbol layers or inability to edit the layer's attributes in GUI."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:761
# cf6d856a2ae1437c97f7a27eb75cbfed
msgid "We will have to create metadata for the symbol layer::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:777
# ff86a866fd9d49f0abdc22d14e74df52
msgid "You should pass layer type (the same as returned by the layer) and symbol type (marker/line/fill) to the constructor of parent class. :func:`createSymbolLayer` takes care of creating an instance of symbol layer with attributes specified in the `props` dictionary. (Beware, the keys are QString instances, not \"str\" objects). And there is :func:`createSymbolLayerWidget` method which returns settings widget for this symbol layer type."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:784
# a9fcfa410412476892ac936efedeacc8
msgid "The last step is to add this symbol layer to the registry --- and we are done."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:790
# fcd8a861955a4362837f30ca6827f05a
msgid "Creating Custom Renderers"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:792
# 6b7d46d322f44c4fb9da8cd96840c1a9
msgid "It might be useful to create a new renderer implementation if you would like to customize the rules how to select symbols for rendering of features. Some use cases where you would want to do it: symbol is determined from a combination of fields, size of symbols changes depending on current scale etc."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:797
# f8174a9a65a64b918b34a404039f507e
msgid "The following code shows a simple custom renderer that creates two marker symbols and chooses randomly one of them for every feature::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:824
# 76b4678f99194fb19c91a867fe9435a5
msgid "The constructor of parent :class:`QgsFeatureRendererV2` class needs renderer name (has to be unique among renderers). :func:`symbolForFeature` method is the one that decides what symbol will be used for a particular feature. :func:`startRender` and :func:`stopRender` take care of initialization/finalization of symbol rendering. :func:`usedAttributes` method can return a list of field names that renderer expects to be present. Finally :func:`clone` function should return a copy of the renderer."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:832
# 70234e5e85634c6dbb37c49415623af4
msgid "Like with symbol layers, it is possible to attach a GUI for configuration of the renderer. It has to be derived from :class:`QgsRendererV2Widget`. The following sample code creates a button that allows user to set symbol of the first symbol::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:861
# ebc176e656b3496089c0f20788ed795a
msgid "The constructor receives instances of the active layer (:class:`QgsVectorLayer`), the global style (:class:`QgsStyleV2`) and current renderer. If there is no renderer or the renderer has different type, it will be replaced with our new renderer, otherwise we will use the current renderer (which has already the type we need). The widget contents should be updated to show current state of the renderer. When the renderer dialog is accepted, widget's :func:`renderer` method is called to get the current renderer --- it will be assigned to the layer."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:870
# 4401657412854d66aa6a168a730da37d
msgid "The last missing bit is the renderer metadata and registration in registry, otherwise loading of layers with the renderer will not work and user will not be able to select it from the list of renderers. Let us finish our RandomRenderer example::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:886
# d0fd0db69a0c41f982805fdf98b2246a
msgid "Similarly as with symbol layers, abstract metadata constructor awaits renderer name, name visible for users and optionally name of renderer's icon. :func:`createRenderer` method passes :class:`QDomElement` instance that can be used to restore renderer's state from DOM tree. :func:`createRendererWidget` method creates the configuration widget. It does not have to be present or can return `None` if the renderer does not come with GUI."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:893
# 38decc54894d45afbac7414c2702c83f
msgid "To associate an icon with the renderer you can assign it in :class:`QgsRendererV2AbstractMetadata` constructor as a third (optional) argument --- the base class constructor in the RandomRendererMetadata :func:`__init__` function becomes::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:903
# b4a777276f2a4d91aa7fa2720487c8f7
msgid "The icon can be associated also at any later time using :func:`setIcon` method of the metadata class. The icon can be loaded from a file (as shown above) or can be loaded from a `Qt resource <http://qt.nokia.com/doc/4.5/resources.html>`_ (PyQt4 includes .qrc compiler for Python)."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:909
# c799f82813ae48a2b891d02259f4a7d3
msgid "Further Topics"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:912
# ae435a5a0e69462abc797dd4ab0678b2
msgid "creating/modifying symbols"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:913
# de4f8145f6864e67beec64727c7998eb
msgid "working with style (:class:`QgsStyleV2`)"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:914
# cf53f0dc320545fabc63d8778a3defe6
msgid "working with color ramps (:class:`QgsVectorColorRampV2`)"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:915
# 83bf77167a784e1bb5fe6ed6cd8f4acd
msgid "rule-based renderer"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:916
# 89487fd056ce482282ae7bebea3be281
msgid "exploring symbol layer and renderer registries"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:921
# 4446684b87684bd795371499aa14d407
msgid "Old Symbology"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:923
# d759a72357b44aa0a5d458554a1595f4
msgid "A symbol determines color, size and other properties of the feature. Renderer associated with the layer decides what symbol will be used for particular feature. There are four available renderers:"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:927
# a7c48306ff524d7782a68f676628951e
msgid "single symbol renderer (:class:`QgsSingleSymbolRenderer`) --- all features are rendererd with the same symbol."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:929
# 8259c93d47104ffdb53bd83f5e8491f9
msgid "unique value renderer (:class:`QgsUniqueValueRenderer`) --- symbol for each feature is choosen from attribute value."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:931
# b262d7cdd3d04fc7817e13100d0d21ff
msgid "graduated symbol renderer (:class:`QgsGraduatedSymbolRenderer`) --- a symbol is applied to a subgroup (class) of features, which is calculated on a numeric field"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:934
# 5f6e9181109648998ab6b21a7f7dc303
msgid "continuous color renderer (:class:`QgsContinuousSymbolRenderer`)"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:936
# 7dd65322b26847589025336ad13bc5e8
msgid "How to create a point symbol::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:946
# 11b99d3f146a4df4b2b3476cd003c5ed
msgid "The :func:`setNamedPointSymbol` method determines the shape of the symbol. There are two classes: hardcoded symbols (prefixed ``hard:``) and SVG symbols (prefixed ``svg:``). The following hardcoded symbols are available: ``circle``, ``rectangle``, ``diamond``, ``pentagon``, ``cross``, ``cross2``, ``triangle``, ``equilateral_triangle``, ``star``, ``regular_star``, ``arrow``."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:952
# 59dd7db14160424685f120917e0205a7
msgid "How to create an SVG symbol::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:958
# 71e7416c2ad34087bef0d22e95bdfaed
msgid "SVG symbols do not support setting colors, fill and line styles."
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:960
# e3bdd5ed5ee14f638c7ae11a2fe1a918
msgid "How to create a line symbol::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:964
# 26e961523360425ab5599f9d10e5cc5f
msgid "How to create a fill symbol::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:968
# 37ff25ca7a384afb9add397f45fb705d
msgid "Create a single symbol renderer::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:973
# 49bb93348832455f9ec3ba65068ad564
msgid "Assign the renderer to a layer::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:977
# e1c335f794ca4d4ca7bf1c260fd2e05e
msgid "Create unique value renderer::"
msgstr ""

#: ../../source/pyqgis_developer_cookbook/03_vector.rst:981
# 430827fe2fbb42118ac54e37d89cccb1
msgid "Create graduated symbol renderer::"
msgstr ""

